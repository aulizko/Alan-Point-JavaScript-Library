AP.add('widget.editor.formatter', function (A) {

    /* utilites */
    var $ = A.Query,
        S = A.String,
        E = A.namespace('Widget.Editor');


    /* Constants */
    var ELEMENT_NODE_TYPE = 1; // (Node && Node.ELEMENT_NODE) ? Node.ELEMENT_NODE : 1, // (Somewhy IE (even 8 version) just cannot even read Node property
//        TEXT_NODE_TYPE = 3; // (Node && Node.TEXT_NODE) ? Node.TEXT_NODE : 3; // same as above

    /* RegExp's (Compile it to speed up regex search) */
    var blockElementsRegExp = /^(h[1-6]|hr|p|div|address|pre|form|table|li|ol|ul|tr|td|caption|blockquote|center|dl|dt|dd|dir|fieldset|noscript|noframes|menu|isindex|samp)$/,
        upperCaseElementNameRegExp = /<[^> ]*/g,
        elementAttributeRegExp = /<[^>]*>/g,
        singleAttributeRegExp = / [^=]+=/g,
        unQuotedAttribute = /( [^=]+=)([^"][^ >]*)/g,
        styleAttributeRegExp = / style="[^"]*"/g,
        alignAttributeRegExp = / align="[^"]*"/g,
        improperBRRegExp = /<br>/g,
        brAsLastChildInBlockRegExp = /<br \/>\s*<\/(h1|h2|h3|h4|h5|h6|li|p)/ig,
        improperIMGRegExp = /(<img [^>]+[^\/])>/g;

    /**
     * Utility which helps to convert image dummies, used by editArea into real flash objects and back, and so on.
     * This object also helps to work with DOM incompletness and to convert WYSIWYG result html into valid (x)HTML
     * @class Formatter
     */
    A.Widget.Editor.Formatter =  {
        /**
         * Check if provided node is block element or not
         * @method isBlock
         * @param node {Element|String} Node or node type.
         * @return {Boolean} true if provided element is block, false otherwise.
         */
        isBlock : function (node) {
            if (node.nodeType && node.nodeType !== ELEMENT_NODE_TYPE)
                return false;

            node = node.nodeName || node;
            return blockElementsRegExp.test(node.toLowerCase());
        },

        /**
         * Convert objects which cannot be properly showed at the design mode
         * (like flash objects, fully csssed quotes and allthat) with dummys - images, blockquotes and all that.
         * @method prepareHTML
         * @param html {String} HTML code to work with
         * @return fixed html
         */
        prepareHTMLForEditing : function (html) {
            this.workingObject = A.config.doc.createElement('div');
            this.workingObject.innerHTML = html;

            this.publish('prepareHTMLForEditing');

            return this.workingObject.innerHTML;
        },

        /**
         * Convert dummy html, generated by wysiwyg to the produce-level html.
         * @method prepareHTMLForSave
         * @param html {String} HTML code to work with
         * @return {String} fixed html
         */
        prepareHTMLForSave : function (html) {
            this.workingObject = A.config.doc.createElement('div');
            this.workingObject.innerHTML = html;

            this.publish('prepareHTMLForSave');

            return this.workingObject.innerHTML;
        }


    };



    A.extend(A.Widget.Editor.Formatter, A.util.Event.Observable);

}, '1.0.1', [
    { name : 'lang', minVersion : '0.0.3' },
    { name : 'query', minVersion : '0.0.1' },
    { name : 'array', minVersion : '1.0.0' },
    { name : 'string', minVersion : '0.0.1' },
    { name : 'templateEngine', minVersion : '0.0.2' }
]);