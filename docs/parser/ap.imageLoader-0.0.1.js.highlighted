<div class="highlight" ><pre><span class="c">/**</span>
<span class="c"> * The image loader is a framework to dynamically load images</span>
<span class="c"> * according to certain triggers, enabling faster load times</span>
<span class="c"> * and a more responsive UI.</span>
<span class="c"> * @module imageloader</span>
<span class="c"> */</span>
<span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;imageloader&#39;</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    
    <span class="k">var</span> <span class="nx">L</span> <span class="o">=</span> <span class="nx">AP</span><span class="o">.</span><span class="nx">Lang</span><span class="o">,</span> <span class="nx">O</span> <span class="o">=</span> <span class="nx">AP</span><span class="o">.</span><span class="nx">Observer</span><span class="o">;</span>
    <span class="c">/**</span>
<span class="c">     * A group for images. A group can have one time limit and a series of triggers. </span>
<span class="c">     * Thus the images belonging to this group must share these constraints.</span>
<span class="c">     * Usage: &lt;ul&gt;&lt;li&gt;Custom event: &lt;code&gt;var imageGroup = AP.ImageLoader.group(&#39;goodsItemsLoaded&#39;);&lt;/code&gt;&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;DOM event: &lt;code&gt;var imageGroup = AP.ImageLoader.group({event: {el: &#39;goodsList&#39;, action: &#39;click&#39;}});&lt;/code&gt;&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;timeuot only: &lt;code&gt;var imageGroup = AP.ImageLoader.group(2);&lt;/code&gt;&lt;/li&gt; </span>
<span class="c">     * &lt;li&gt;both timeout and event present: &lt;code&gt;var imageGroup = AP.ImageLoader.group({event: &#39;goodsItemLoaded&#39;, timeout: 2});&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</span>
<span class="c">     * @class ImageLoader.group</span>
<span class="c">     * @constructor</span>
<span class="c">     * @param o {Number|String|Object} Also, if this parameter is string than we consider it as Observable event and register it on the observer.</span>
<span class="c">     * If this parameter is number, than it will be interpreted as timeout value.</span>
<span class="c">     * If this parameter is object, it will be interpretered as configure param, which contains all necessary </span>
<span class="c">     * information to register group. Must contain one of following properties: event or timeout. Details:</span>
<span class="c">     * &lt;ul&gt;&lt;li&gt;event {String|Object} If string, than this is name of the custom event from the Observer. If object, </span>
<span class="c">     * than this is DOM event which group will be subscribed to. That object must have next properties:</span>
<span class="c">     * &lt;ul&gt;&lt;li&gt;el {String|HTMLElement} id or HTMLElement reference on which event listener will be bind&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;action {String} type of the event. Ex: &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;mouseout&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;timeout {Number} Timeout (time limit) length, in seconds. Can be undefined, or &lt;= 0, for no time limit&lt;/li&gt;&lt;/ul&gt;</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">group</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="c">/**</span>
<span class="c">        * Collection of images registered with this group</span>
<span class="c">   	    * @property _imgObjects </span>
<span class="c">        * @private</span>
<span class="c">        * @type {Object}</span>
<span class="c">        */</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">_imgObjects</span> <span class="o">=</span> <span class="o">{};</span>
        
        <span class="c">/**</span>
<span class="c">    	 * Timeout (time limit) length, in seconds</span>
<span class="c">    	 * @property timeoutLen</span>
<span class="c">    	 * @type {Number}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">timeoutLen</span> <span class="o">=</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">o</span><span class="o">))</span> <span class="o">?</span> <span class="nx">o</span> <span class="o">:</span> <span class="nx">o</span><span class="o">.</span><span class="nx">timeout</span><span class="o">;</span>

    	<span class="c">/**</span>
<span class="c">    	 * Timeout object to keep a handle on the time limit</span>
<span class="c">    	 * @property _timeout</span>
<span class="c">    	 * @private</span>
<span class="c">    	 * @type {Object}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">_timeout</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    	
    	<span class="c">/**</span>
<span class="c">    	 * Collection of triggers for this group.</span>
<span class="c">    	 * Keeps track of each trigger&#39;s element, event, and event-listener-callback &quot;fetch&quot; function</span>
<span class="c">    	 * @property _triggers</span>
<span class="c">    	 * @private</span>
<span class="c">    	 * @type {Array}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">_triggers</span> <span class="o">=</span> <span class="o">[];</span>
    	
    	<span class="c">/**</span>
<span class="c">    	 * Collection of custom-event triggers for this group.</span>
<span class="c">    	 * Keeps track of each trigger&#39;s event object and event-listener-callback &quot;fetch&quot; function</span>
<span class="c">    	 * @property _customTriggers</span>
<span class="c">    	 * @private</span>
<span class="c">    	 * @type {Array}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">_customTriggers</span> <span class="o">=</span> <span class="o">[];</span>
        
        <span class="c">// add a listener to set the time limit in the onload</span>
<span class="c"></span>        <span class="nx">$</span><span class="o">(</span><span class="nb">window</span><span class="o">).</span><span class="nx">onload</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="nx">_onloadTasks</span><span class="o">();});</span>
    	
    	<span class="c">// add the trigger</span>
<span class="c"></span>    	<span class="k">this</span><span class="o">.</span><span class="nx">addTrigger</span><span class="o">((</span><span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">o</span><span class="o">))</span> <span class="o">?</span> <span class="nx">o</span> <span class="o">:</span> <span class="nx">o</span><span class="o">.</span><span class="nx">event</span><span class="o">);</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener</span>
<span class="c">     * @method addTrigger</span>
<span class="c">     * @param event* {String|Object} any number of custom event names or objects which contains DOMEvent type and HTMLElement id or reference.</span>
<span class="c">     * If event is object, he must contain following properties:</span>
<span class="c">     * &lt;ul&gt;&lt;li&gt;el {String|HTMLElement} id or reference to the html element&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;action {String} type of the object. Must be dom event type, like &lt;code&gt;click&lt;/code&gt; or &lt;code&gt;mouseout&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">group</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">addTrigger</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">evt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">evt</span><span class="o">))</span> <span class="o">{</span>
            <span class="c">// make sure we&#39;re dealing with a custom event</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">_customTriggers</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">O</span><span class="o">.</span><span class="nx">subscribe</span><span class="o">(</span><span class="nx">evt</span><span class="o">,</span> <span class="nx">fetch</span><span class="o">,</span> <span class="k">this</span><span class="o">));</span>
        	
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">evt</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">evt</span><span class="o">.</span><span class="nx">el</span><span class="o">,</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">evt</span><span class="o">.</span><span class="nx">action</span><span class="o">;</span>
            
            <span class="nx">el</span> <span class="o">=</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">el</span><span class="o">))</span> <span class="o">?</span> <span class="nx">$</span><span class="o">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">el</span><span class="o">)</span> <span class="o">:</span> <span class="nx">$</span><span class="o">(</span><span class="nx">el</span><span class="o">);</span>
            
            <span class="c">// check presence of element and event type</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(!</span><span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">action</span><span class="o">)</span> <span class="o">||</span> <span class="nx">el</span><span class="o">.</span><span class="nx">length</span> <span class="o">!=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>
            
            
            <span class="k">var</span> <span class="nx">wrappedFetch</span> <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="nx">fetch</span><span class="o">();</span>
            <span class="o">};</span>
            
            <span class="k">this</span><span class="o">.</span><span class="nx">_triggers</span><span class="o">.</span><span class="nx">push</span><span class="o">([</span><span class="nx">el</span><span class="o">,</span> <span class="nx">action</span><span class="o">,</span> <span class="nx">wrappedFetch</span><span class="o">]);</span>
            <span class="nx">el</span><span class="o">.</span><span class="nx">bind</span><span class="o">(</span><span class="nx">action</span><span class="o">,</span> <span class="nx">wrappedFetch</span><span class="o">);</span>
        <span class="o">}</span> 
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Setup to do in the window&#39;s onload</span>
<span class="c">     * Initiates time limit for group; executes the fold check for the images</span>
<span class="c">     * @method _onloadTasks</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">group</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">_onloadTasks</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">timeoutLen</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">timeoutLen</span><span class="o">)</span> <span class="o">==</span> <span class="s1">&#39;number&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="nx">timeoutLen</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
    		<span class="k">this</span><span class="o">.</span><span class="nx">_timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span> <span class="nx">self</span><span class="o">.</span><span class="nx">fetch</span><span class="o">();</span> <span class="o">},</span> <span class="k">this</span><span class="o">.</span><span class="nx">timeoutLen</span> <span class="o">*</span> <span class="m">1000</span><span class="o">);</span>
    	<span class="o">}</span>
    <span class="o">};</span>
    
    <span class="k">this</span><span class="o">.</span><span class="nx">pngRegular</span> <span class="o">=</span> <span class="sr">/\.png$/</span><span class="o">;</span>
    
    <span class="c">/**</span>
<span class="c">     * Adds any number of images to group.</span>
<span class="c">     * @param o* {Object} any number of added images. Each image descriptor must contains following properties:</span>
<span class="c">     * &lt;ul&gt;&lt;li&gt;el {String|HTMLElement} id or reference to the html element&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;url {String} url to the element. If el is not image and url doesn&#39;t contain file extension you&#39;d better </span>
<span class="c">     * manual set type of background property - png or not (we need it cause ie6 is bad with alpha-transparency)&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;width {Number} width of element in pixels. (opt)&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;height {Number} height of element in pixels. (opt)&lt;/li&gt;</span>
<span class="c">     * &lt;li&gt;png {Boolean} how will be url applyed to the element. If &lt;code&gt;el.nodeName == &#39;IMG&#39;&lt;/code&gt; we completely don&#39;t </span>
<span class="c">     * need it - url will be applyed as src. If &lt;code&gt;el&lt;/code&gt; is not img html element, so that url will be specified as </span>
<span class="c">     * &lt;code&gt;style.backgroundImage&lt;/code&gt; property. Also, with ie6 lack of alpha-transparency support, we need to define, </span>
<span class="c">     * need we register background image with filter or not. Thus method would try to automatic define, is loaded image png</span>
<span class="c">     * or not - depends on file extension in the url. But if url doesn&#39;t determine it, we need to specify it with value of the</span>
<span class="c">     * &lt;code&gt;png&lt;/code&gt; parameter.&lt;/li&gt;&lt;/ul&gt;</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">group</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">addImage</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">el</span><span class="o">,</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">url</span><span class="o">,</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">width</span><span class="o">,</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">height</span><span class="o">,</span> <span class="nx">png</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">png</span><span class="o">;</span>
        <span class="nx">el</span> <span class="o">=</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">el</span><span class="o">))</span> <span class="o">?</span> <span class="nx">$</span><span class="o">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">el</span><span class="o">)</span> <span class="o">:</span> <span class="nx">$</span><span class="o">(</span><span class="nx">el</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">el</span><span class="o">.</span><span class="nx">is</span><span class="o">(</span><span class="s1">&#39;img&#39;</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">_imgObjects</span><span class="o">[</span><span class="nx">el</span><span class="o">.</span><span class="nx">attr</span><span class="o">(</span><span class="s1">&#39;id&#39;</span><span class="o">)]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AP</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">image</span><span class="o">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">url</span><span class="o">,</span> <span class="o">{</span><span class="nx">width</span><span class="o">:</span> <span class="nx">width</span><span class="o">,</span> <span class="nx">height</span><span class="o">:</span> <span class="nx">height</span><span class="o">});</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c">// check url and png</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(</span><span class="nx">png</span> <span class="o">||</span> <span class="k">this</span><span class="o">.</span><span class="nx">pngRegular</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">url</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="nx">_imgObjects</span><span class="o">[</span><span class="nx">el</span><span class="o">.</span><span class="nx">attr</span><span class="o">(</span><span class="s1">&#39;id&#39;</span><span class="o">)]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AP</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundPngImage</span><span class="o">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">url</span><span class="o">,</span> <span class="nx">ailProps</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="nx">_imgObjects</span><span class="o">[</span><span class="nx">el</span><span class="o">.</span><span class="nx">attr</span><span class="o">(</span><span class="s1">&#39;id&#39;</span><span class="o">)]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AP</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundImage</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Displays the images in the group</span>
<span class="c">     * @method fetch</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">group</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">fetch</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">length</span><span class="o">,</span> <span class="nx">trigger</span><span class="o">;</span>
        <span class="nx">clearTimeout</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">_timeout</span><span class="o">);</span>
    	
    	<span class="c">// remove custom event subscriptions</span>
<span class="c"></span>    	<span class="k">for</span> <span class="o">(</span><span class="nx">i</span><span class="o">,</span> <span class="nx">length</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_customTriggers</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++)</span> <span class="o">{</span>
    	    <span class="nx">O</span><span class="o">.</span><span class="nx">unsubscribe</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">customTriggers</span><span class="o">[</span><span class="nx">i</span><span class="o">]);</span>
    	<span class="o">}</span>
    	<span class="c">// remove all listeners</span>
<span class="c"></span>    	<span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">length</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_triggers</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++)</span> <span class="o">{</span>
    	    <span class="nx">trigger</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_triggers</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
    	    <span class="nx">$</span><span class="o">(</span><span class="nx">trigger</span><span class="o">[</span><span class="m">0</span><span class="o">]).</span><span class="nx">unbind</span><span class="o">(</span><span class="nx">trigger</span><span class="o">[</span><span class="m">1</span><span class="o">],</span> <span class="nx">trigger</span><span class="o">[</span><span class="m">2</span><span class="o">]);</span>
    	<span class="o">}</span>

    	<span class="c">// fetch registered images</span>
<span class="c"></span>    	<span class="nx">AP</span><span class="o">.</span><span class="nb">Object</span><span class="o">.</span><span class="nx">each</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">_imgObjects</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">image</span><span class="o">)</span> <span class="o">{</span>
    	    <span class="nx">image</span><span class="o">.</span><span class="nx">fetch</span><span class="o">();</span>
    	<span class="o">},</span> <span class="k">this</span><span class="o">);</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Base class for image objects to be registered with the groups</span>
<span class="c">     * must be overrided by child class</span>
<span class="c">     * @class ImageLoader.imgObj</span>
<span class="c">     * @constructor</span>
<span class="c">     * @param el {jQuery} HTML DOM id of the image element</span>
<span class="c">     * @param url {String} URL for the image</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">imgObj</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">url</span><span class="o">)</span> <span class="o">{</span>
        <span class="c">/**</span>
<span class="c">    	 * jQuery reference to the HTML image element</span>
<span class="c">    	 * @property el</span>
<span class="c">    	 * @type {jQuery}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">el</span><span class="o">;</span>

    	<span class="c">/**</span>
<span class="c">    	 * URL for the image</span>
<span class="c">    	 * @property url</span>
<span class="c">    	 * @type String</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="o">;</span>

    	<span class="c">/**</span>
<span class="c">    	 * Pixel width of the image. Will be set as a &quot;width&quot; attribute after the image is fetched.</span>
<span class="c">    	 * Detaults to the natural width of the image.</span>
<span class="c">    	 * @property width</span>
<span class="c">    	 * @type {Number}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    	<span class="c">/**</span>
<span class="c">    	 * Pixel height of the image. Will be set as a &quot;height&quot; attribute after the image is fetched.</span>
<span class="c">    	 * Detaults to the natural height of the image.</span>
<span class="c">    	 * @property height</span>
<span class="c">    	 * @type {Number}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    	<span class="c">/**</span>
<span class="c">    	 * Whether the style.visibility should be set to &quot;visible&quot; after the image is fetched.</span>
<span class="c">    	 * Used when setting src images as visibility:hidden prior to image fetching</span>
<span class="c">    	 * @property setVisible</span>
<span class="c">    	 * @type {Boolean}</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">setVisible</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

    	<span class="c">/**</span>
<span class="c">    	 * Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren&#39;t fetched twice</span>
<span class="c">    	 * @property _fetched</span>
<span class="c">    	 * @type {Boolean}</span>
<span class="c">    	 * @private</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">_fetched</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Displays the image; puts the URL into the DOM</span>
<span class="c">     * @method fetch</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">image</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">fetch</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">_fetched</span><span class="o">)</span> <span class="o">{</span>
    		<span class="k">return</span><span class="o">;</span>
    	<span class="o">}</span>
    	
    	<span class="k">this</span><span class="o">.</span><span class="nx">_applyUrl</span><span class="o">(</span><span class="nx">el</span><span class="o">);</span>

		<span class="nx">el</span><span class="o">.</span><span class="nx">style</span><span class="o">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="s1">&#39;visible&#39;</span><span class="o">;</span>
    	
    	<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">width</span><span class="o">)</span> <span class="o">{</span>
    		<span class="nx">el</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">width</span><span class="o">;</span>
    	<span class="o">}</span>
    	
    	<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">height</span><span class="o">)</span> <span class="o">{</span>
    		<span class="nx">el</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">height</span><span class="o">;</span>
    	<span class="o">}</span>
    	
    	<span class="k">this</span><span class="o">.</span><span class="nx">_fetched</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Background image object. A background image is one whose URL is specified by &quot;background-image&quot; in the element&#39;s style</span>
<span class="c">     * @class ImageLoader.backgroundImage</span>
<span class="c">     * @constructor</span>
<span class="c">     * @extends ImageLoader.image</span>
<span class="c">     * @param el {jQuery} jQuery reference to the HTML element (not img element)</span>
<span class="c">     * @param {String}	url	URL for the image</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundImage</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">url</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">domId</span><span class="o">,</span> <span class="nx">url</span><span class="o">);</span>
    <span class="o">};</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">AP</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundImage</span><span class="o">,</span> <span class="nx">AP</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">imgObj</span><span class="o">);</span>
    
    <span class="c">/**</span>
<span class="c">     * Inserts the image URL into the DOM so that the image is displayed.</span>
<span class="c">     * Sets style.backgroundImage</span>
<span class="c">     * @method _applyUrl</span>
<span class="c">     * @param {Object}	el	HTML DOM element</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundImage</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">_applyUrl</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">el</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">el</span><span class="o">.</span><span class="nx">css</span><span class="o">(</span><span class="s1">&#39;background-image&#39;</span><span class="o">,</span> <span class="s2">&quot;url(&#39;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">url</span> <span class="o">+</span> <span class="s2">&quot;&#39;)&quot;</span><span class="o">);</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Source image object. A source image is one whose URL is specified by a src attribute in the DOM element</span>
<span class="c">     * @class ImageLoader.image</span>
<span class="c">     * @constructor</span>
<span class="c">     * @extends YAHOO.util.ImageLoader.imgObj</span>
<span class="c">     * @param el {String} HTML DOM id of the image element</span>
<span class="c">     * @param url {String} URL for the image</span>
<span class="c">     * @param misc {Object}	pixel width and height of the image - defaults to image&#39;s natural size</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">image</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">domId</span><span class="o">,</span> <span class="nx">url</span><span class="o">,</span> <span class="nx">misc</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">domId</span><span class="o">,</span> <span class="nx">url</span><span class="o">);</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">misc</span><span class="o">.</span><span class="nx">width</span><span class="o">;</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">misc</span><span class="o">.</span><span class="nx">height</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="nx">A</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">image</span><span class="o">,</span> <span class="nx">AP</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">imgObj</span><span class="o">);</span>
    
    <span class="c">/**</span>
<span class="c">     * Inserts the image URL into the DOM so that the image is displayed.</span>
<span class="c">     * Sets src</span>
<span class="c">     * @method _applyUrl</span>
<span class="c">     * @param {Object}	el	HTML DOM element</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">image</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">_applyUrl</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">el</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">el</span><span class="o">.</span><span class="nx">attr</span><span class="o">(</span><span class="s1">&#39;src&#39;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="nx">url</span><span class="o">);</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by &quot;background-image&quot; in the element&#39;s style</span>
<span class="c">     * @class ImageLoader.pngBgImgObj</span>
<span class="c">     * @constructor</span>
<span class="c">     * @extends ImageLoader.imgObj</span>
<span class="c">     * @param el {jQuery} jQuery reference to the html dom element</span>
<span class="c">     * @param url {String} URL for the image</span>
<span class="c">     * @param ailProps {Object} The AlphaImageLoader properties to be set for the image</span>
<span class="c">     *                    Valid properties are &#39;sizingMethod&#39; and &#39;enabled&#39;</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundPngImage</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">domId</span><span class="o">,</span> <span class="nx">url</span><span class="o">,</span> <span class="nx">ailProps</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">domId</span><span class="o">,</span> <span class="nx">url</span><span class="o">);</span>

    	<span class="c">/**</span>
<span class="c">    	 * AlphaImageLoader properties to be set for the image.</span>
<span class="c">    	 * Valid properties are &quot;sizingMethod&quot; and &quot;enabled&quot;.</span>
<span class="c">    	 * @property props</span>
<span class="c">    	 * @type Object</span>
<span class="c">    	 */</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">props</span> <span class="o">=</span> <span class="nx">ailProps</span> <span class="o">||</span> <span class="o">{};</span>
    	<span class="k">this</span><span class="o">.</span><span class="nx">ie6</span> <span class="o">=</span> <span class="nx">$</span><span class="o">.</span><span class="nx">browser</span><span class="o">.</span><span class="nx">msie</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="nx">$</span><span class="o">.</span><span class="nx">browser</span><span class="o">.</span><span class="nx">version</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="m">0</span><span class="o">,</span> <span class="m">1</span><span class="o">)</span> <span class="o">-</span> <span class="m">0</span><span class="o">)</span> <span class="o">==</span> <span class="m">6</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="nx">A</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundPngImage</span><span class="o">,</span> <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">imgObj</span><span class="o">);</span>
    
    <span class="c">/**</span>
<span class="c">     * Inserts the image URL into the DOM so that the image is displayed.</span>
<span class="c">     * If the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage</span>
<span class="c">     * @method _applyUrl</span>
<span class="c">     * @param el {jQuery}	jQuery reference to HTML DOM element</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">ImageLoader</span><span class="o">.</span><span class="nx">backgroundPngImage</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">_applyUrl</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">el</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">ie6</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">sizingMethod</span> <span class="o">=</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">props</span><span class="o">.</span><span class="nx">sizingMethod</span><span class="o">))</span> <span class="o">?</span> <span class="s1">&#39;scale&#39;</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="nx">props</span><span class="o">.</span><span class="nx">sizingMethod</span><span class="o">;</span>
    		<span class="k">var</span> <span class="nx">enabled</span> <span class="o">=</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">props</span><span class="o">.</span><span class="nx">enabled</span><span class="o">))</span> <span class="o">?</span> <span class="s1">&#39;true&#39;</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="nx">props</span><span class="o">.</span><span class="nx">enabled</span><span class="o">;</span>
    		<span class="nx">el</span><span class="o">.</span><span class="nx">css</span><span class="o">(</span><span class="s1">&#39;filter&#39;</span><span class="o">,</span> 
    		    <span class="s1">&#39;progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&quot;&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">url</span> <span class="o">+</span> 
    		        <span class="s1">&#39;&quot;, sizingMethod=&quot;&#39;</span> <span class="o">+</span> <span class="nx">sizingMethod</span> <span class="o">+</span> <span class="s1">&#39;&quot;, enabled=&quot;&#39;</span> <span class="o">+</span> <span class="nx">enabled</span> <span class="o">+</span> <span class="s1">&#39;&quot;)&#39;</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nx">el</span><span class="o">.</span><span class="nx">css</span><span class="o">(</span><span class="s1">&#39;background-image&#39;</span><span class="o">,</span> <span class="s2">&quot;url(&#39;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">url</span> <span class="o">+</span> <span class="s2">&quot;&#39;)&quot;</span><span class="o">);</span>
    	<span class="o">}</span>
    <span class="o">};</span>
<span class="o">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">);</span>
</pre></div>
