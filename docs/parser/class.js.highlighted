<div class="highlight" ><pre><span class="c">/**</span>
<span class="c"> * Class module. Provide class-based OOP realization first introduced by SIMULA-67.</span>
<span class="c"> * Realization inspired by YUI Base class, Mootools Class (and from both Prototype and Base2, indirectly)</span>
<span class="c"> * Also, some knowledges taken from Douglas Crockford &quot;Classical inheritance in JavaScript&quot; article http://javascript.crockford.com/inheritance.html</span>
<span class="c"> * @module ap</span>
<span class="c"> * @submodule class</span>
<span class="c"> */</span>
<span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;class&#39;</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">initializing</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="nx">fnTest</span> <span class="o">=</span> <span class="sr">/xyz/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span> <span class="nx">xyz</span><span class="o">;</span> <span class="o">})</span> <span class="o">?</span> <span class="sr">/\bbase\b/</span><span class="o">:</span> <span class="sr">/.*/</span><span class="o">;</span>
    <span class="c">// The base Class implementation (does nothing)</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">Class</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Class</span> <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{};</span>

    <span class="c">// Create a new Class that inherits from this class</span>
<span class="c"></span>    <span class="nx">Class</span><span class="o">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">prop</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">base</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">prototype</span><span class="o">;</span>

        <span class="c">// Instantiate a base class (but only create the instance,</span>
<span class="c"></span>        <span class="c">// don&#39;t run the init constructor)</span>
<span class="c"></span>        <span class="nx">initializing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">var</span> <span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="k">this</span><span class="o">();</span>
        <span class="nx">initializing</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="c">// Copy the properties over onto the new prototype</span>
<span class="c"></span>        <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">prop</span><span class="o">)</span> <span class="o">{</span>
            <span class="c">// Check if we&#39;re overwriting an existing function</span>
<span class="c"></span>            <span class="nx">prototype</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">prop</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;function&quot;</span> <span class="o">&amp;&amp;</span>
            <span class="k">typeof</span> <span class="nx">base</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;function&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">fnTest</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">prop</span><span class="o">[</span><span class="nx">name</span><span class="o">])</span> <span class="o">?</span>
                <span class="o">(</span><span class="k">function</span><span class="o">(</span><span class="nx">name</span><span class="o">,</span> <span class="nx">fn</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">base</span><span class="o">;</span>

                        <span class="c">// Add a new .base() method that is the same method</span>
<span class="c"></span>                        <span class="c">// but on the super-class</span>
<span class="c"></span>                        <span class="k">this</span><span class="o">.</span><span class="nx">base</span> <span class="o">=</span> <span class="nx">base</span><span class="o">[</span><span class="nx">name</span><span class="o">];</span>

                        <span class="c">// The method only need to be bound temporarily, so we</span>
<span class="c"></span>                        <span class="c">// remove it when we&#39;re done executing</span>
<span class="c"></span>                        <span class="k">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">fn</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
                        <span class="k">this</span><span class="o">.</span><span class="nx">base</span> <span class="o">=</span> <span class="nx">tmp</span><span class="o">;</span>

                        <span class="k">return</span> <span class="nx">ret</span><span class="o">;</span>
                    <span class="o">};</span>
                <span class="o">})(</span><span class="nx">name</span><span class="o">,</span> <span class="nx">prop</span><span class="o">[</span><span class="nx">name</span><span class="o">])</span> <span class="o">:</span>
                <span class="nx">prop</span><span class="o">[</span><span class="nx">name</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c">// The dummy class constructor</span>
<span class="c"></span>        <span class="k">function</span> <span class="nx">Class</span><span class="o">()</span> <span class="o">{</span>
            <span class="c">// All construction is actually done in the init method</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(!</span><span class="nx">initializing</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="nx">init</span><span class="o">)</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">init</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c">// Populate our constructed prototype object</span>
<span class="c"></span>        <span class="nx">Class</span><span class="o">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">prototype</span><span class="o">;</span>

        <span class="c">// Enforce the constructor to be what we expect</span>
<span class="c"></span>        <span class="nx">Class</span><span class="o">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Class</span><span class="o">;</span>

        <span class="c">// And make this class extendable</span>
<span class="c"></span>        <span class="nx">Class</span><span class="o">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">.</span><span class="nx">callee</span><span class="o">;</span>

        <span class="k">return</span> <span class="nx">Class</span><span class="o">;</span>
    <span class="o">};</span>

<span class="o">},</span> <span class="s1">&#39;0.0.2&#39;</span><span class="o">,</span> <span class="o">[]);</span>
</pre></div>
