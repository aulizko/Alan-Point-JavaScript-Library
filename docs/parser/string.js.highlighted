<div class="highlight" ><pre><span class="c">/**</span>
<span class="c"> * AP string utilites</span>
<span class="c"> * @module ap</span>
<span class="c"> * @submodule string</span>
<span class="c"> */</span>
<span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;string&#39;</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    
    <span class="c">/**</span>
<span class="c">     * Misc string utilites</span>
<span class="c">     * @class String</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nb">String</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nb">String</span> <span class="o">||</span> <span class="o">{};</span>
    <span class="k">var</span> <span class="nx">S</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nb">String</span><span class="o">,</span> <span class="nx">L</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">;</span>
    
    <span class="c">/**</span>
<span class="c">     * replace escaped HTML entities such as &amp;amp;gt; to the valid html symbols</span>
<span class="c">     * @method unescapeHTML</span>
<span class="c">     * @for AP~String</span>
<span class="c">     * @param rawHTMLCode {String} html code with escaped symbols</span>
<span class="c">     * @return {HTMLCode}</span>
<span class="c">     */</span>
    <span class="nx">S</span><span class="o">.</span><span class="nx">unescapeHTML</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">rawHTMLCode</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">rawHTMLCode</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&amp;amp;/g</span><span class="o">,</span> <span class="s1">&#39;&amp;&#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&amp;gt;/g</span><span class="o">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&amp;lt;/g</span><span class="o">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&amp;quot;/g</span><span class="o">,</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">)</span>
          <span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&amp;#39;/g</span><span class="o">,</span> <span class="s1">&#39;\&#39;&#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&amp;#160;/g</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&amp;/g</span><span class="o">,</span> <span class="s1">&#39;&amp;amp;&#39;</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Change first letter to uppercase</span>
<span class="c">     * @method capitalize</span>
<span class="c">     * @param word {String} word to capitalize (actually, it can be not even word, but complete sentence)</span>
<span class="c">     * @return {String} capitalized word</span>
<span class="c">     */</span>
    <span class="nx">S</span><span class="o">.</span><span class="nx">capitalize</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="c">/* String */</span> <span class="nx">word</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">word</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nx">word</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\w+/g</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">a</span><span class="o">){</span>
           <span class="k">return</span> <span class="nx">a</span><span class="o">.</span><span class="nx">charAt</span><span class="o">(</span><span class="m">0</span><span class="o">).</span><span class="nx">toUpperCase</span><span class="o">()</span> <span class="o">+</span> <span class="nx">a</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="m">1</span><span class="o">).</span><span class="nx">toLowerCase</span><span class="o">();</span>
        <span class="o">});</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Return pluralized string</span>
<span class="c">     * @method pluralize</span>
<span class="c">     * @param number {Number} a number</span>
<span class="c">     * @param forms {Object} object, containing three forms of the word. The three forms must be included as properties</span>
<span class="c">     * with names 1, 2, 3</span>
<span class="c">     * @return {String} number, space and word in the right form</span>
<span class="c">     */</span>
    <span class="nx">S</span><span class="o">.</span><span class="nx">pluralize</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">number</span><span class="o">,</span> <span class="nx">forms</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">temp</span><span class="o">,</span> <span class="nx">safeNumber</span> <span class="o">=</span> <span class="nx">number</span><span class="o">;</span>
        <span class="nx">number</span> <span class="o">=</span> <span class="nb">Math</span><span class="o">.</span><span class="nx">abs</span><span class="o">(</span><span class="nx">number</span><span class="o">)</span> <span class="o">%</span><span class="m">100</span><span class="o">;</span>
        <span class="nx">temp</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">%</span> <span class="m">10</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">number</span> <span class="o">&gt;</span> <span class="m">10</span> <span class="o">&amp;&amp;</span> <span class="nx">number</span> <span class="o">&lt;</span> <span class="m">20</span><span class="o">)</span> <span class="k">return</span> <span class="nx">safeNumber</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">forms</span><span class="o">[</span><span class="m">5</span><span class="o">];</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">temp</span> <span class="o">&gt;</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">temp</span> <span class="o">&lt;</span> <span class="m">5</span><span class="o">)</span> <span class="k">return</span> <span class="nx">safeNumber</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">forms</span><span class="o">[</span><span class="m">2</span><span class="o">];</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">number</span> <span class="o">==</span> <span class="m">1</span><span class="o">)</span> <span class="k">return</span> <span class="nx">safeNumber</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">forms</span><span class="o">[</span><span class="m">1</span><span class="o">];</span>
        <span class="k">return</span> <span class="nx">safeNumber</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">forms</span><span class="o">[</span><span class="m">5</span><span class="o">];</span>
    <span class="o">};</span>
    
    
    <span class="c">/**</span>
<span class="c">     * Returns a string without any leading or trailing whitespace.  If </span>
<span class="c">     * the input is not a string, the input will be returned untouched.</span>
<span class="c">     * Realization taken from Steven Levitahn trim11 implementation http://blog.stevenlevithan.com/archives/faster-trim-javascript</span>
<span class="c">     * @method trim</span>
<span class="c">     * @static</span>
<span class="c">     * @param s {string} the string to trim</span>
<span class="c">     * @return {string} the trimmed string</span>
<span class="c">     */</span>
    <span class="nx">S</span><span class="o">.</span><span class="nx">trim</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">str</span><span class="o">)</span> <span class="o">{</span>
    	<span class="k">var</span>	<span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/^\s\s*/</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="o">),</span>
    		<span class="nx">ws</span> <span class="o">=</span> <span class="sr">/\s/</span><span class="o">,</span>
    		<span class="nx">i</span> <span class="o">=</span> <span class="nx">str</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
    	<span class="k">while</span> <span class="o">(</span><span class="nx">ws</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">str</span><span class="o">.</span><span class="nx">charAt</span><span class="o">(--</span><span class="nx">i</span><span class="o">)));</span>
    	<span class="k">return</span> <span class="nx">str</span><span class="o">.</span><span class="nx">slice</span><span class="o">(</span><span class="m">0</span><span class="o">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="m">1</span><span class="o">);</span>
    <span class="o">};</span>
    
<span class="o">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">,</span> <span class="o">[</span>
    <span class="o">{</span>
        <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;lang&#39;</span><span class="o">,</span>
        <span class="nx">minVersion</span> <span class="o">:</span> <span class="s1">&#39;0.0.1&#39;</span>
    <span class="o">}</span>
<span class="o">]);</span>
</pre></div>
