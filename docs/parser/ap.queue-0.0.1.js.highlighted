<div class="highlight" ><pre><span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;queue&#39;</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">L</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">;</span>


    <span class="c">/**</span>
<span class="c">     * Mechanism to execute a series of callbacks in a non-blocking queue.  Each</span>
<span class="c">     * callback is executed via setTimout unless configured with a negative</span>
<span class="c">     * timeout, in which case it is run in blocking mode in the same execution</span>
<span class="c">     * thread as the previous callback.  Callbacks can be function references or</span>
<span class="c">     * object literals with the following keys:</span>
<span class="c">     * &lt;ul&gt;</span>
<span class="c">     *    &lt;li&gt;&lt;code&gt;fn&lt;/code&gt; - {Function} REQUIRED the callback function.&lt;/li&gt;</span>
<span class="c">     *    &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.&lt;/li&gt;</span>
<span class="c">     *    &lt;li&gt;&lt;code&gt;until&lt;/code&gt; - {Function} boolean function executed before each iteration.  Return true to indicate callback completion.&lt;/li&gt;</span>
<span class="c">     *    &lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; - {Number} number of times to execute the callback before proceeding to the next callback in the queue. Incompatible with &lt;code&gt;until&lt;/code&gt;.&lt;/li&gt;</span>
<span class="c">     * &lt;/ul&gt;</span>
<span class="c">     *</span>
<span class="c">     * @module queue</span>
<span class="c">     * @class Queue</span>
<span class="c">     * @constructor</span>
<span class="c">     * @param callback* {Function|Object} Any number of callbacks to initialize the queue</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">Queue</span> <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
        <span class="c">// Factory or Constructor</span>
<span class="c"></span>        <span class="k">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span> <span class="k">instanceof</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Queue</span> <span class="o">?</span> <span class="k">this</span> <span class="o">:</span> <span class="k">new</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Queue</span><span class="o">();</span>
        <span class="c">/**</span>
<span class="c">         * The callback queue</span>
<span class="c">         * @property p</span>
<span class="c">         * @type {Array}</span>
<span class="c">         * @protected</span>
<span class="c">         */</span>
        <span class="nx">me</span><span class="o">.</span><span class="nx">p</span> <span class="o">=</span> <span class="o">[];</span>
        <span class="k">return</span> <span class="nx">me</span><span class="o">.</span><span class="nx">add</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">me</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="nx">A</span><span class="o">.</span><span class="nx">Queue</span><span class="o">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="o">{</span>
        <span class="c">/**</span>
<span class="c">         * Timeout id used to pause or stop execution and indicate the execution</span>
<span class="c">         * state of the Queue.  0 indicates paused or stopped, negatives indicate</span>
<span class="c">         * blocking execution, and positives indicate non-blocking execution.</span>
<span class="c">         * @property s</span>
<span class="c">         * @type {number}</span>
<span class="c">         * @protected</span>
<span class="c">         */</span>
        <span class="nx">s</span> <span class="o">:</span> <span class="m">0</span><span class="o">,</span>


        <span class="c">/**</span>
<span class="c">         * Add any number of callbacks to the end of the queue</span>
<span class="c">         * @method add</span>
<span class="c">         * @param callback* {Function|Object} Any number of callbacks</span>
<span class="c">         * @return {Queue} the Queue instance</span>
<span class="c">         */</span>
        <span class="nx">add</span> <span class="o">:</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">callbacks</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nb">Array</span><span class="o">(</span><span class="nx">arguments</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">p</span><span class="o">.</span><span class="nx">splice</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">p</span><span class="o">,[</span><span class="k">this</span><span class="o">.</span><span class="nx">p</span><span class="o">.</span><span class="nx">length</span><span class="o">,</span><span class="m">0</span><span class="o">].</span><span class="nx">concat</span><span class="o">(</span><span class="nx">callbacks</span><span class="o">));</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Pause the execution of the Queue after the execution of the current</span>
<span class="c">         * callback completes.  If called from code outside of a queued callback,</span>
<span class="c">         * clears the timeout for the pending callback. Paused Queue can be</span>
<span class="c">         * restarted with q.run()</span>
<span class="c">         * @method pause</span>
<span class="c">         * @return {Queue} the Queue instance</span>
<span class="c">         */</span>
        <span class="nx">pause</span> <span class="o">:</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
            <span class="nx">clearTimeout</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">s</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">s</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Execute the queue callbacks (also resumes paused Queue).</span>
<span class="c">         * @method run</span>
<span class="c">         * @return {Queue} the Queue instance</span>
<span class="c">         */</span>
        <span class="nx">run</span> <span class="o">:</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">p</span><span class="o">[</span><span class="m">0</span><span class="o">],</span> <span class="nx">fn</span><span class="o">;</span>
            
            <span class="k">if</span> <span class="o">(!</span><span class="nx">c</span> <span class="o">||</span> <span class="k">this</span><span class="o">.</span><span class="nx">s</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>
            
            <span class="nx">fn</span> <span class="o">=</span> <span class="nx">c</span><span class="o">.</span><span class="nx">fn</span> <span class="o">||</span> <span class="nx">c</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">fn</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">ms</span> <span class="o">=</span> <span class="nx">c</span><span class="o">.</span><span class="nx">timeout</span> <span class="o">||</span> <span class="m">0</span><span class="o">,</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
                <span class="k">this</span><span class="o">.</span><span class="nx">p</span><span class="o">.</span><span class="nx">shift</span><span class="o">();</span>

                <span class="k">this</span><span class="o">.</span><span class="nx">s</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
                    <span class="nx">me</span><span class="o">.</span><span class="nx">exec</span><span class="o">(</span><span class="nx">fn</span><span class="o">,</span> <span class="nx">c</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">me</span><span class="o">.</span><span class="nx">s</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">me</span><span class="o">.</span><span class="nx">s</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>
                        <span class="nx">me</span><span class="o">.</span><span class="nx">run</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">},</span> <span class="nx">ms</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Executes the callback function</span>
<span class="c">         * @method _exec</span>
<span class="c">         * @param fn {Function} the function to execute</span>
<span class="c">         * @param c {Object | Function} the callback as defined during add(c)</span>
<span class="c">         * @protected</span>
<span class="c">         */</span>
        <span class="nx">exec</span> <span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">fn</span><span class="o">,</span> <span class="nx">c</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">fn</span><span class="o">.</span><span class="nx">call</span><span class="o">((</span><span class="nx">c</span><span class="o">.</span><span class="nx">context</span><span class="o">)</span> <span class="o">?</span> <span class="nx">c</span><span class="o">.</span><span class="nx">context</span> <span class="o">:</span> <span class="nx">A</span><span class="o">.</span><span class="nx">win</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>


<span class="o">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">);</span>
</pre></div>
