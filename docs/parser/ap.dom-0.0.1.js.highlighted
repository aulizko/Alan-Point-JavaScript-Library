<div class="highlight" ><pre><span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;dom&#39;</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    
    <span class="nx">A</span><span class="o">.</span><span class="nx">DOM</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">DOM</span> <span class="o">||</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">cachTarget</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
        
        <span class="nx">purge</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">d</span><span class="o">.</span><span class="nx">attributes</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">l</span><span class="o">,</span> <span class="nx">n</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">l</span> <span class="o">=</span> <span class="nx">a</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">n</span> <span class="o">=</span> <span class="nx">a</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">name</span><span class="o">;</span>
                    <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">d</span><span class="o">[</span><span class="nx">n</span><span class="o">]</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">d</span><span class="o">[</span><span class="nx">n</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nx">a</span> <span class="o">=</span> <span class="nx">d</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">l</span> <span class="o">=</span> <span class="nx">a</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">purge</span><span class="o">(</span><span class="nx">d</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">[</span><span class="nx">i</span><span class="o">]);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">};</span>
        
        <span class="k">return</span> <span class="o">{</span>
            <span class="c">/**</span>
<span class="c">             * @method getMatchingTarget</span>
<span class="c">             * @param e {Event}</span>
<span class="c">             * @param condition {String} Css-3 compliant selector</span>
<span class="c">             * @return {HTMLElement|jQuery|Null}</span>
<span class="c">             */</span>
            <span class="nx">getMatchingTarget</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="c">/* Event */</span><span class="nx">e</span><span class="o">,</span> <span class="c">/*String*/</span><span class="nx">condition</span><span class="o">)</span> <span class="o">{</span>
                <span class="c">// remember what is truth - target or srcElement.</span>
<span class="c"></span>                <span class="c">// also, stop resolve safari bug every time - if it is safari, let us know it</span>
<span class="c"></span>             
                <span class="k">var</span> <span class="nx">elem</span><span class="o">,</span> <span class="nx">L</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">;</span>
                
                <span class="k">if</span> <span class="o">(</span><span class="nx">cachTarget</span> <span class="o">===</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">e</span><span class="o">.</span><span class="nx">target</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">cachTarget</span> <span class="o">=</span> <span class="s1">&#39;target&#39;</span><span class="o">;</span>
                        <span class="nx">elem</span> <span class="o">=</span> <span class="nx">e</span><span class="o">.</span><span class="nx">target</span><span class="o">;</span>
                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">e</span><span class="o">.</span><span class="nx">srcElement</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">cachTarget</span> <span class="o">=</span> <span class="s1">&#39;srcElement&#39;</span><span class="o">;</span>
                            <span class="nx">elem</span> <span class="o">=</span> <span class="nx">e</span><span class="o">.</span><span class="nx">srcElement</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="nx">elem</span> <span class="o">=</span> <span class="nx">e</span><span class="o">[</span><span class="nx">cachTarget</span><span class="o">];</span>
                <span class="o">}</span>
                
                <span class="c">// defeat Safari bug</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(</span><span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">==</span> <span class="m">3</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">elem</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">elem</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c">// work with classes</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(</span><span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">).</span><span class="nx">is</span><span class="o">(</span><span class="nx">condition</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nx">elem</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">).</span><span class="nx">parents</span><span class="o">(</span><span class="nx">condition</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">},</span>
            
            <span class="c">/**</span>
<span class="c">             * This method does exactly the same, that getMatchingTarget method, but have a huge difference:</span>
<span class="c">             * It doesn&#39;t use .is method of jQuery so that it works much faster. </span>
<span class="c">             * But with this also came a limitness - cause we don&#39;t use jQuery to determine element, </span>
<span class="c">             * We also cannot use it selectors. </span>
<span class="c">             * This function is designed to use with thousands of same events - like keypress or mousemove.</span>
<span class="c">             * @method getMatchingTargetFast</span>
<span class="c">             * @param e {Event} dom event</span>
<span class="c">             * @param type {NodeType} type of the element</span>
<span class="c">             * @param class {String} style class of the element</span>
<span class="c">             * @return {null|HTMLElement}</span>
<span class="c">             */</span>
            <span class="nx">getMatchingTargetFast</span> <span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">e</span><span class="o">,</span> <span class="nx">elementType</span><span class="o">,</span> <span class="nx">className</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">elem</span><span class="o">,</span> <span class="nx">L</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">;</span>
                
                <span class="k">if</span> <span class="o">(</span><span class="nx">cachTarget</span> <span class="o">===</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">e</span><span class="o">.</span><span class="nx">target</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">cachTarget</span> <span class="o">=</span> <span class="s1">&#39;target&#39;</span><span class="o">;</span>
                        <span class="nx">elem</span> <span class="o">=</span> <span class="nx">e</span><span class="o">.</span><span class="nx">target</span><span class="o">;</span>
                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">e</span><span class="o">.</span><span class="nx">srcElement</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">cachTarget</span> <span class="o">=</span> <span class="s1">&#39;srcElement&#39;</span><span class="o">;</span>
                            <span class="nx">elem</span> <span class="o">=</span> <span class="nx">e</span><span class="o">.</span><span class="nx">srcElement</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="nx">elem</span> <span class="o">=</span> <span class="nx">e</span><span class="o">[</span><span class="nx">cachTarget</span><span class="o">];</span>
                <span class="o">}</span>
                
                <span class="c">// defeat Safari bug</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(</span><span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">==</span> <span class="m">3</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">elem</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">elem</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
                
                <span class="k">if</span> <span class="o">((</span><span class="nx">elem</span><span class="o">.</span><span class="nx">nodeName</span><span class="o">.</span><span class="nx">toLowerCase</span><span class="o">()</span> <span class="o">==</span> <span class="nx">elementType</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">elem</span><span class="o">.</span><span class="nx">className</span> <span class="o">==</span> <span class="nx">className</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nx">elem</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">},</span>

            <span class="nx">setInnerHTML</span> <span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">html</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="nx">el</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">html</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c">// prevent memory leaks - remove cycling links</span>
<span class="c"></span>                <span class="o">(</span><span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>

                    <span class="k">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">attributes</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">l</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span> <span class="nx">c</span><span class="o">;</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">l</span> <span class="o">=</span> <span class="nx">a</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
                        <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">n</span> <span class="o">=</span> <span class="nx">a</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">name</span><span class="o">;</span>
                            <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">o</span><span class="o">[</span><span class="nx">n</span><span class="o">]</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">{</span>
                                <span class="nx">o</span><span class="o">[</span><span class="nx">n</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>

                    <span class="nx">a</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">;</span>

                    <span class="k">if</span> <span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">l</span> <span class="o">=</span> <span class="nx">a</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
                        <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">c</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>

                            <span class="c">// delete child nodes</span>
<span class="c"></span>                            <span class="nx">arguments</span><span class="o">.</span><span class="nx">callee</span><span class="o">(</span><span class="nx">c</span><span class="o">);</span>

                            <span class="c">// remove event handlers</span>
<span class="c"></span>                            <span class="nx">purge</span><span class="o">(</span><span class="nx">c</span><span class="o">);</span>
                        <span class="o">}</span>
                    <span class="o">}</span>

                <span class="o">})(</span><span class="nx">el</span><span class="o">);</span>

                <span class="c">// Удаляем все скрипты из HTML-строки и выставляем свойство innerHTML</span>
<span class="c"></span>                <span class="nx">el</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/&lt;script[^&gt;]*&gt;[\S\s]*?&lt;\/script[^&gt;]*&gt;/ig</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">);</span>

                <span class="c">// Возвращаем ссылку на первый дочерний узел</span>
<span class="c"></span>                <span class="k">return</span> <span class="nx">el</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}();</span>

<span class="o">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">);</span>
</pre></div>
