<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * AP object utilities</span>
<span class="c"> * @module ap</span>
<span class="c"> * @submodule object</span>
<span class="c"> */</span>
<span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;object&#39;</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    <span class="c">/**</span>
<span class="c">     * Adds the following Object utilities to the YUI instance</span>
<span class="c">     * @class AP~object</span>
<span class="c">     */</span>

    <span class="c">/**</span>
<span class="c">     * A.Object(o) returns a new object based upon the supplied object.  </span>
<span class="c">     * Inspired from the Douglas Crockford &#39;object&#39; method</span>
<span class="c">     * @method Object</span>
<span class="c">     * @static</span>
<span class="c">     * @param o the supplier object</span>
<span class="c">     * @return {object} the new object</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nb">Object</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">F</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{};</span>
        <span class="nx">F</span><span class="o">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">F</span><span class="o">();</span>
    <span class="o">};</span>
    
    <span class="k">var</span> <span class="nx">O</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nb">Object</span><span class="o">,</span> <span class="nx">L</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">;</span>
    
    <span class="c">/**</span>
<span class="c">     * Returns an array containing the object&#39;s keys</span>
<span class="c">     * @method Object.keys</span>
<span class="c">     * @static</span>
<span class="c">     * @param o an object</span>
<span class="c">     * @return {string[]} the keys</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">keys</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">a</span><span class="o">=[],</span> <span class="nx">i</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">(</span><span class="nx">i</span><span class="o">))</span> <span class="o">{</span>
                <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="nx">a</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Executes a function on each item. The function</span>
<span class="c">     * receives the value, the key, and the object</span>
<span class="c">     * as paramters (in that order).</span>
<span class="c">     * @method Object.each</span>
<span class="c">     * @static</span>
<span class="c">     * @param o the object to iterate</span>
<span class="c">     * @param f {function} the function to execute</span>
<span class="c">     * @param c the execution context</span>
<span class="c">     * @param proto {boolean} include proto</span>
<span class="c">     * @return {AP} the AP instance</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">each</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">c</span><span class="o">,</span> <span class="nx">proto</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">||</span> <span class="nx">A</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">proto</span> <span class="o">||</span> <span class="nx">o</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">(</span><span class="nx">i</span><span class="o">))</span> <span class="o">{</span>
                <span class="nx">f</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">s</span><span class="o">,</span> <span class="nx">o</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">o</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nx">A</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Return new object based on passed in object.</span>
<span class="c">     * New object contains public properties from the supplier, if passed in function return true</span>
<span class="c">     * when evaluated property value.</span>
<span class="c">     * @method Object.filter</span>
<span class="c">     * @static</span>
<span class="c">     * @param o {Object} the object to filter</span>
<span class="c">     * @param f {Function} the function to execute</span>
<span class="c">     * @param c {Object} execution context</span>
<span class="c">     * @return {Object} new object</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">filter</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="nx">O</span><span class="o">.</span><span class="nx">each</span><span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">item</span><span class="o">,</span> <span class="nx">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">f</span><span class="o">(</span><span class="nx">item</span><span class="o">))</span> <span class="nx">res</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">=</span> <span class="nx">item</span><span class="o">;</span>
        <span class="o">},</span> <span class="nx">c</span> <span class="o">||</span> <span class="nx">A</span><span class="o">);</span>
        <span class="k">return</span> <span class="nx">res</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Cleans passed in object - remove properties which value is null or undefined.</span>
<span class="c">     * @method Object.clean</span>
<span class="c">     * @static</span>
<span class="c">     * @param o {Object} &#39;dirty&#39; object</span>
<span class="c">     * @return {Object} clean object</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">clean</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">O</span><span class="o">.</span><span class="nx">filter</span><span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">item</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">item</span><span class="o">);</span> <span class="o">});</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Create mapping of the input object</span>
<span class="c">     * @method Object.map</span>
<span class="c">     * @static</span>
<span class="c">     * @param o {Object} source object</span>
<span class="c">     * @param f {Function} function to execute</span>
<span class="c">     * @param c {Object} execution context</span>
<span class="c">     * @return {Object} mapped object</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">map</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="nx">O</span><span class="o">.</span><span class="nx">each</span><span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">item</span><span class="o">,</span> <span class="nx">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">res</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">=</span> <span class="nx">f</span><span class="o">(</span><span class="nx">item</span><span class="o">);</span>
        <span class="o">},</span> <span class="nx">c</span> <span class="o">||</span> <span class="nx">A</span><span class="o">);</span>
        <span class="k">return</span> <span class="nx">res</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Executes provided function on each property of the supplied object</span>
<span class="c">     * If at least one property value, passed in the function, return true, return true.</span>
<span class="c">     * Otherwise, return false.</span>
<span class="c">     * @method Object.some</span>
<span class="c">     * @static</span>
<span class="c">     * @param o {Object} object to iterate</span>
<span class="c">     * @param f {Function} comparator</span>
<span class="c">     * @param c {Object} execution context</span>
<span class="c">     * @return {boolean} match at least one property value comparator or not</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">some</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">||</span> <span class="nx">A</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">f</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">s</span><span class="o">,</span> <span class="nx">o</span><span class="o">[</span><span class="nx">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/** </span>
<span class="c">     * Executes provided function on each property of the supplied object.</span>
<span class="c">     * If all properties value match comparator, than, return true. Otherwise, return false.</span>
<span class="c">     * @method Object.every</span>
<span class="c">     * @static</span>
<span class="c">     * @param o {Object} object to iterate</span>
<span class="c">     * @param f {Function} comparator</span>
<span class="c">     * @param c {Object} execution context</span>
<span class="c">     * @return {boolean}</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">every</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">||</span> <span class="nx">A</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="nx">f</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">s</span><span class="o">,</span> <span class="nx">o</span><span class="o">[</span><span class="nx">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Return name of the property which value equal passed value</span>
<span class="c">     * @method Object.indexOf</span>
<span class="c">     * @static</span>
<span class="c">     * @param o {Object} source hash</span>
<span class="c">     * @param v value to compare with</span>
<span class="c">     * @return name of the property</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">indexOf</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">o</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">==</span> <span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nx">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">};</span>
<span class="o">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">,</span> <span class="o">[</span>
    <span class="o">{</span>
        <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;lang&#39;</span><span class="o">,</span>
        <span class="nx">minVersion</span> <span class="o">:</span> <span class="s1">&#39;0.0.2&#39;</span>
    <span class="o">}</span>
<span class="o">]);</span>
</pre></div>
