<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * AP lang utils</span>
<span class="c"> * Inspired by YUI lang module</span>
<span class="c"> * @module ap</span>
<span class="c"> * @submodule lang</span>
<span class="c"> */</span>
<span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;lang&#39;</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    <span class="c">/**</span>
<span class="c">     * Provides the language utilites and extensions used by the library</span>
<span class="c">     * @class Lang</span>
<span class="c">     * @static</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span> <span class="o">||</span> <span class="o">{};</span>
    
    <span class="k">var</span> <span class="nx">L</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">,</span>
        <span class="nx">ARRAY_TOSTRING</span> <span class="o">=</span> <span class="s1">&#39;[object Array]&#39;</span><span class="o">,</span>
        <span class="nx">FUNCTION_TOSTRING</span> <span class="o">=</span> <span class="s1">&#39;[object Function]&#39;</span><span class="o">,</span>
        <span class="nx">PRIMITIVES</span> <span class="o">=</span> <span class="o">{</span> <span class="s1">&#39;string&#39;</span> <span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="o">,</span> <span class="s1">&#39;boolean&#39;</span> <span class="o">:</span> <span class="s1">&#39;boolean&#39;</span><span class="o">,</span> <span class="s1">&#39;number&#39;</span> <span class="o">:</span> <span class="s1">&#39;number&#39;</span><span class="o">},</span>
        <span class="nx">OBJECT</span> <span class="o">=</span> <span class="s1">&#39;object&#39;</span><span class="o">,</span>
        <span class="nx">UNDEFINED</span> <span class="o">=</span> <span class="s1">&#39;undefined&#39;</span><span class="o">,</span>
        <span class="nx">OP</span> <span class="o">=</span> <span class="nb">Object</span><span class="o">.</span><span class="nx">prototype</span><span class="o">;</span>
    
    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is an array.</span>
<span class="c">     * Testing typeof/instanceof/constructor of arrays across frame </span>
<span class="c">     * boundaries isn&#39;t possible in Safari unless you have a reference</span>
<span class="c">     * to the other frame to test against its Array prototype.  To</span>
<span class="c">     * handle this case, we test well-known array properties instead.</span>
<span class="c">     * properties.</span>
<span class="c">     * @TODO can we kill this cross frame hack?</span>
<span class="c">     * @method isArray</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is an array</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isArray</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span> 
        <span class="k">return</span> <span class="nx">OP</span><span class="o">.</span><span class="nx">toString</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">===</span> <span class="nx">ARRAY_TOSTRING</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is a boolean</span>
<span class="c">     * @method isBoolean</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is a boolean</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isBoolean</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">typeof</span> <span class="nx">o</span> <span class="o">===</span> <span class="nx">PRIMITIVES</span><span class="o">[</span><span class="s1">&#39;boolean&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="nx">o</span> <span class="k">instanceof</span> <span class="nb">Boolean</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is a function</span>
<span class="c">     * Note: Internet Explorer thinks certain functions are objects:</span>
<span class="c">     *</span>
<span class="c">     * var obj = document.createElement(&quot;object&quot;);</span>
<span class="c">     * AP.Lang.isFunction(obj.getAttribute) // reports false in IE</span>
<span class="c">     *</span>
<span class="c">     * var input = document.createElement(&quot;input&quot;); // append to body</span>
<span class="c">     * AP.Lang.isFunction(input.focus) // reports false in IE</span>
<span class="c">     *</span>
<span class="c">     * You will have to implement additional tests if these functions</span>
<span class="c">     * matter to you.</span>
<span class="c">     *</span>
<span class="c">     * @method isFunction</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is a function</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isFunction</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">OP</span><span class="o">.</span><span class="nx">toString</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">===</span> <span class="nx">FUNCTION_TOSTRING</span><span class="o">;</span>
    <span class="o">};</span>
        
    <span class="c">/**</span>
<span class="c">     * Determines whether or not the supplied object is a date instance</span>
<span class="c">     * @method isDate</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is a date</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isDate</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">o</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is null</span>
<span class="c">     * @method isNull</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is null</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isNull</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">o</span> <span class="o">===</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">};</span>
        
    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is a legal number</span>
<span class="c">     * Also returns true if Number object passed in</span>
<span class="c">     * @method isNumber</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is a number</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isNumber</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">o</span> <span class="o">===</span> <span class="nx">PRIMITIVES</span><span class="o">[</span><span class="s1">&#39;number&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="nx">o</span> <span class="k">instanceof</span> <span class="nb">Number</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nb">isFinite</span><span class="o">(</span><span class="nx">o</span><span class="o">);</span>
    <span class="o">};</span>
      
    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is of type object</span>
<span class="c">     * or function</span>
<span class="c">     * @method isObject</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @param failfn {boolean} fail if the input is a function</span>
<span class="c">     * @return {boolean} true if o is an object</span>
<span class="c">     */</span>  
    <span class="nx">L</span><span class="o">.</span><span class="nx">isObject</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">failfn</span><span class="o">)</span> <span class="o">{</span>
<span class="k">return</span> <span class="o">(</span><span class="nx">o</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">o</span> <span class="o">===</span> <span class="nx">OBJECT</span> <span class="o">||</span> <span class="o">(!</span><span class="nx">failfn</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">o</span><span class="o">))))</span> <span class="o">||</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">};</span>
        
    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is a string</span>
<span class="c">     * @method isString</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is a string</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isString</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">typeof</span> <span class="nx">o</span> <span class="o">===</span> <span class="nx">PRIMITIVES</span><span class="o">[</span><span class="s1">&#39;string&#39;</span><span class="o">];</span>
    <span class="o">};</span>
        
    <span class="c">/**</span>
<span class="c">     * Determines whether or not the provided object is undefined</span>
<span class="c">     * @method isUndefined</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The object to test</span>
<span class="c">     * @return {boolean} true if o is undefined</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isUndefined</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">typeof</span> <span class="nx">o</span> <span class="o">===</span> <span class="nx">UNDEFINED</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * A convenience method for detecting a legitimate non-null value.</span>
<span class="c">     * Returns false for null/undefined/NaN, true for other values, </span>
<span class="c">     * including 0/false/&#39;&#39;</span>
<span class="c">     * @method isValue</span>
<span class="c">     * @static</span>
<span class="c">     * @param o The item to test</span>
<span class="c">     * @return {boolean} true if it is not null/undefined/NaN || false</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">isValue</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">||</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">||</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">||</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isBoolean</span><span class="o">(</span><span class="nx">o</span><span class="o">));</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Deep compare of array, object, function, string and number. If value of object are equal, return true. </span>
<span class="c">     * Otherwise, return false. </span>
<span class="c">     * TODO: review maybe it is better to update this method in MochiKit way - to return -1,0,1 and being able to sort.</span>
<span class="c">     * @method compare</span>
<span class="c">     * @static</span>
<span class="c">     * @param a first item to compare</span>
<span class="c">     * @param b second item to compare</span>
<span class="c">     */</span>
    <span class="nx">L</span><span class="o">.</span><span class="nx">compare</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">count</span><span class="o">,</span> <span class="nx">lengthOfA</span><span class="o">,</span> <span class="nx">lengthOfB</span><span class="o">;</span>
        <span class="c">// return primitive equivalent for string, number or boolean object</span>
<span class="c"></span>        <span class="k">function</span> <span class="nx">primitify</span> <span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">||</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">valueOf</span><span class="o">())</span> <span class="o">||</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isBoolean</span><span class="o">(</span><span class="nx">o</span><span class="o">))</span> <span class="o">?</span> <span class="nx">o</span><span class="o">.</span><span class="nx">valueOf</span><span class="o">()</span> <span class="o">:</span> <span class="nx">o</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c">// check type of the passed values. if it is different, return</span>
<span class="c"></span>        <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isNull</span><span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isNull</span><span class="o">(</span><span class="nx">b</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
         
        <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">b</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c">// convert date into milliseconds</span>
<span class="c"></span>        <span class="nx">a</span> <span class="o">=</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isDate</span><span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">?</span> <span class="nx">a</span><span class="o">.</span><span class="nx">getTime</span><span class="o">()</span> <span class="o">:</span> <span class="nx">a</span><span class="o">;</span>
        <span class="nx">b</span> <span class="o">=</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isDate</span><span class="o">(</span><span class="nx">b</span><span class="o">)</span> <span class="o">?</span> <span class="nx">b</span><span class="o">.</span><span class="nx">getTime</span><span class="o">()</span> <span class="o">:</span> <span class="nx">b</span><span class="o">;</span>
        <span class="c">// convert objects into primitives</span>
<span class="c"></span>        <span class="nx">a</span> <span class="o">=</span> <span class="nx">primitify</span><span class="o">(</span><span class="nx">a</span><span class="o">);</span>
        <span class="nx">b</span> <span class="o">=</span> <span class="nx">primitify</span><span class="o">(</span><span class="nx">b</span><span class="o">);</span>
        
        <span class="c">// check if a &amp; b are primitives</span>
<span class="c"></span>        <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="k">in</span> <span class="nx">PRIMITIVES</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">PRIMITIVES</span><span class="o">)</span> <span class="o">{</span>
            <span class="c">// compare primitives</span>
<span class="c"></span>            <span class="k">return</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c">// compare functions </span>
<span class="c"></span>        <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">b</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">a</span><span class="o">.</span><span class="nx">toString</span><span class="o">()</span> <span class="o">==</span> <span class="nx">b</span><span class="o">.</span><span class="nx">toString</span><span class="o">();</span>
        <span class="o">}</span> 
        
        <span class="c">// deep compare arraylike structures</span>
<span class="c"></span>        <span class="c">// compare types of the passed variables</span>
<span class="c"></span>        <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">b</span><span class="o">))</span> <span class="o">{</span>
            <span class="c">// compare lengths</span>
<span class="c"></span>            <span class="nx">count</span> <span class="o">=</span> <span class="nx">a</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">count</span> <span class="o">!=</span> <span class="nx">b</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="o">}</span>
            <span class="c">// recursive call compare onto each element</span>
<span class="c"></span>            <span class="k">while</span><span class="o">(</span><span class="nx">count</span><span class="o">--)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">compare</span><span class="o">(</span><span class="nx">a</span><span class="o">[</span><span class="nx">count</span><span class="o">],</span> <span class="nx">b</span><span class="o">[</span><span class="nx">count</span><span class="o">])</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="c">// deep compare objects</span>
<span class="c"></span>        <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">b</span><span class="o">))</span> <span class="o">{</span>
            <span class="c">// check number of properties. if it&#39;s different, return false</span>
<span class="c"></span>            <span class="nx">lengthOfA</span> <span class="o">=</span> <span class="nx">lengthOfB</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>
            
            <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">a</span><span class="o">)</span> <span class="o">{</span> <span class="nx">lengthOfB</span><span class="o">++;</span> <span class="nx">lengthOfA</span><span class="o">++;</span> <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">lengthOfA</span> <span class="o">!=</span> <span class="nx">lengthOfB</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="o">}</span>
            <span class="c">// recursive call compare method for every property</span>
<span class="c"></span>            <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">a</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">compare</span><span class="o">(</span><span class="nx">a</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">b</span><span class="o">[</span><span class="nx">i</span><span class="o">])</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="c">// passed variables cannot be compared, return false (TODO: review, need we to throw error)</span>
<span class="c"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
     <span class="o">};</span>
<span class="o">},</span> <span class="s1">&#39;0.0.3&#39;</span><span class="o">);</span>
</pre></div>
