<div class="highlight" ><pre><span class="c">/**</span>
<span class="c"> * OOP utils.  If included, the best OOP helpers will be available at the AP.OOPP namespace</span>
<span class="c"> * @module ap</span>
<span class="c"> * @submodule oop</span>
<span class="c"> */</span>
<span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;oop&#39;</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    <span class="c">/**</span>
<span class="c">     * Utils collection</span>
<span class="c">     * @class AP~OOP</span>
<span class="c">     */</span>
    <span class="nx">A</span><span class="o">.</span><span class="nx">OOP</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">OOP</span> <span class="o">||</span> <span class="o">{};</span>
    
    <span class="k">var</span> <span class="nx">O</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">OOP</span><span class="o">,</span>
        <span class="nx">OP</span> <span class="o">=</span> <span class="nb">Object</span><span class="o">.</span><span class="nx">prototype</span><span class="o">,</span> 
        <span class="nx">IEF</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;toString&quot;</span><span class="o">,</span> <span class="s2">&quot;valueOf&quot;</span><span class="o">],</span> 
        <span class="nx">PROTO</span> <span class="o">=</span> <span class="s1">&#39;prototype&#39;</span><span class="o">,</span>
        <span class="nx">L</span> <span class="o">=</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Lang</span><span class="o">,</span>
    
    <span class="c">/**</span>
<span class="c">     * IE will not enumerate native functions in a derived object even if the</span>
<span class="c">     * function was overridden.  This is a workaround for specific functions </span>
<span class="c">     * we care about on the Object prototype. </span>
<span class="c">     * @property _iefix</span>
<span class="c">     * @param {Function} r  the object to receive the augmentation</span>
<span class="c">     * @param {Function} s  the object that supplies the properties to augment</span>
<span class="c">     * @param w a whitelist object (the keys are the valid items to reference)</span>
<span class="c">     * @private</span>
<span class="c">     * @for YUI</span>
<span class="c">     */</span>
    <span class="nx">_iefix</span> <span class="o">=</span> <span class="o">(</span><span class="nx">A</span><span class="o">.</span><span class="nx">Browser</span> <span class="o">&amp;&amp;</span> <span class="nx">A</span><span class="o">.</span><span class="nx">Browser</span><span class="o">.</span><span class="nx">ie</span><span class="o">)</span> <span class="o">?</span>
        <span class="k">function</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">w</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="m">0</span><span class="o">,</span> <span class="nx">a</span><span class="o">=</span><span class="nx">IEF</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">a</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">s</span><span class="o">[</span><span class="nx">n</span><span class="o">];</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">f</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">f</span> <span class="o">!=</span> <span class="nx">OP</span><span class="o">[</span><span class="nx">n</span><span class="o">])</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="nx">w</span> <span class="o">||</span> <span class="o">(</span><span class="nx">n</span> <span class="k">in</span> <span class="nx">w</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nx">r</span><span class="o">[</span><span class="nx">n</span><span class="o">]=</span><span class="nx">f</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{};</span>
    
    <span class="c">/**</span>
<span class="c">     * Returns a new object containing all of the properties of</span>
<span class="c">     * all the supplied objects.  The properties from later objects</span>
<span class="c">     * will overwrite those in earlier objects.  Passing in a</span>
<span class="c">     * single object will create a shallow copy of it.  For a deep</span>
<span class="c">     * copy, use clone.</span>
<span class="c">     * @method merge</span>
<span class="c">     * @param arguments {Object*} the objects to merge</span>
<span class="c">     * @return {object} the new merged object</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">merge</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
        <span class="c">// var o={}, a=arguments;</span>
<span class="c"></span>        <span class="c">// for (var i=0, l=a.length; i&lt;l; i=i+1) {</span>
<span class="c"></span>        <span class="c">//var a=arguments, o=Y.Object(a[0]);</span>
<span class="c"></span>        <span class="k">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">arguments</span><span class="o">,</span> <span class="nx">o</span><span class="o">={};</span>
        <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="m">0</span><span class="o">,</span> <span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">O</span><span class="o">.</span><span class="nx">mix</span><span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">a</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="kc">true</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nx">o</span><span class="o">;</span>
    <span class="o">};</span>
    
    <span class="c">/**</span>
<span class="c">     * Applies the supplier&#39;s properties to the receiver.  By default</span>
<span class="c">     * all prototype and static propertes on the supplier are applied</span>
<span class="c">     * to the corresponding spot on the receiver.  By default all</span>
<span class="c">     * properties are applied, and a property that is already on the</span>
<span class="c">     * reciever will not be overwritten.  The default behavior can</span>
<span class="c">     * be modified by supplying the appropriate parameters.</span>
<span class="c">     *</span>
<span class="c">     * @method mix</span>
<span class="c">     * @param {Function} r  the object to receive the augmentation</span>
<span class="c">     * @param {Function} s  the object that supplies the properties to augment</span>
<span class="c">     * @param ov {boolean} if true, properties already on the receiver</span>
<span class="c">     * will be overwritten if found on the supplier.</span>
<span class="c">     * @param wl {string[]} a whitelist.  If supplied, only properties in </span>
<span class="c">     * this list will be applied to the receiver.</span>
<span class="c">     * @param {int} mode what should be copies, and to where</span>
<span class="c">     *        default(0): object to object</span>
<span class="c">     *        1: prototype to prototype (old augment)</span>
<span class="c">     *        2: prototype to prototype and object props (new augment)</span>
<span class="c">     *        3: prototype to object</span>
<span class="c">     *        4: object to prototype</span>
<span class="c">     * @param merge {boolean} merge objects instead of overwriting/ignoring</span>
<span class="c">     * Used by Y.aggregate</span>
<span class="c">     * @return {object} the augmented object</span>
<span class="c">     * @TODO review for PR2</span>
<span class="c">     */</span>
    <span class="nx">O</span><span class="o">.</span><span class="nx">mix</span> <span class="o">=</span>  <span class="k">function</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">ov</span><span class="o">,</span> <span class="nx">wl</span><span class="o">,</span> <span class="nx">mode</span><span class="o">,</span> <span class="nx">merge</span><span class="o">)</span> <span class="o">{</span>

         <span class="k">if</span> <span class="o">(!</span><span class="nx">s</span><span class="o">||!</span><span class="nx">r</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">return</span> <span class="nx">A</span><span class="o">;</span>
         <span class="o">}</span>

         <span class="k">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="o">(</span><span class="nx">wl</span> <span class="o">&amp;&amp;</span> <span class="nx">wl</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">?</span> <span class="nx">A</span><span class="o">.</span><span class="nx">hash</span><span class="o">(</span><span class="nx">wl</span><span class="o">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">merge</span><span class="o">,</span>

             <span class="nx">f</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">fr</span><span class="o">,</span> <span class="nx">fs</span><span class="o">,</span> <span class="nx">proto</span><span class="o">,</span> <span class="nx">iwl</span><span class="o">)</span> <span class="o">{</span>

                 <span class="k">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">m</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">fr</span><span class="o">);</span>

                 <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">fs</span><span class="o">)</span> <span class="o">{</span> 

                     <span class="k">if</span> <span class="o">(</span><span class="nx">fs</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">(</span><span class="nx">i</span><span class="o">))</span> <span class="o">{</span>

                         <span class="c">// We never want to overwrite the prototype</span>
<span class="c"></span>                         <span class="c">// if (PROTO === i) {</span>
<span class="c"></span>                         <span class="k">if</span> <span class="o">(</span><span class="nx">PROTO</span> <span class="o">===</span> <span class="nx">i</span> <span class="o">||</span> <span class="s1">&#39;_uid&#39;</span> <span class="o">===</span> <span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                             <span class="k">continue</span><span class="o">;</span>
                         <span class="o">}</span>

                         <span class="c">// @TODO deal with the hasownprop issue</span>
<span class="c"></span>
                         <span class="c">// check white list if it was supplied</span>
<span class="c"></span>                         <span class="k">if</span> <span class="o">(!</span><span class="nx">w</span> <span class="o">||</span> <span class="nx">iwl</span> <span class="o">||</span> <span class="o">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">w</span><span class="o">))</span> <span class="o">{</span>
                             <span class="c">// if the receiver has this property, it is an object,</span>
<span class="c"></span>                             <span class="c">// and merge is specified, merge the two objects.</span>
<span class="c"></span>                             <span class="k">if</span> <span class="o">(</span><span class="nx">m</span> <span class="o">&amp;&amp;</span> <span class="nx">L</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">fr</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
                                 <span class="c">// console.log(&#39;aggregate RECURSE: &#39; + i);</span>
<span class="c"></span>                                 <span class="c">// @TODO recursive or no?</span>
<span class="c"></span>                                 <span class="c">// Y.mix(fr[i], fs[i]); // not recursive</span>
<span class="c"></span>                                 <span class="nx">f</span><span class="o">(</span><span class="nx">fr</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">fs</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">proto</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c">// recursive</span>
<span class="c"></span>                             <span class="c">// otherwise apply the property only if overwrite</span>
<span class="c"></span>                             <span class="c">// is specified or the receiver doesn&#39;t have one.</span>
<span class="c"></span>                             <span class="c">// @TODO make sure the &#39;arr&#39; check isn&#39;t desructive</span>
<span class="c"></span>                             <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="nx">arr</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">ov</span> <span class="o">||</span> <span class="o">!(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">fr</span><span class="o">)))</span> <span class="o">{</span>
                                 <span class="c">// console.log(&#39;hash: &#39; + i);</span>
<span class="c"></span>                                 <span class="nx">fr</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">fs</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
                             <span class="c">// if merge is specified and the receiver is an array,</span>
<span class="c"></span>                             <span class="c">// append the array item</span>
<span class="c"></span>                             <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">arr</span><span class="o">)</span> <span class="o">{</span>
                                 <span class="c">// console.log(&#39;array: &#39; + i);</span>
<span class="c"></span>                                 <span class="c">// @TODO probably will need to remove dups</span>
<span class="c"></span>                                 <span class="nx">fr</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">fs</span><span class="o">[</span><span class="nx">i</span><span class="o">]);</span>
                             <span class="o">}</span>
                         <span class="o">}</span>
                     <span class="o">}</span>
                 <span class="o">}</span>

                 <span class="nx">_iefix</span><span class="o">(</span><span class="nx">fr</span><span class="o">,</span> <span class="nx">fs</span><span class="o">,</span> <span class="nx">w</span><span class="o">);</span>
             <span class="o">};</span>

         <span class="k">var</span> <span class="nx">rp</span> <span class="o">=</span> <span class="nx">r</span><span class="o">.</span><span class="nx">prototype</span><span class="o">,</span> <span class="nx">sp</span> <span class="o">=</span> <span class="nx">s</span><span class="o">.</span><span class="nx">prototype</span><span class="o">;</span>

         <span class="nx">switch</span> <span class="o">(</span><span class="nx">mode</span><span class="o">)</span> <span class="o">{</span>
             <span class="nx">case</span> <span class="m">1</span><span class="o">:</span> <span class="c">// proto to proto</span>
<span class="c"></span>                 <span class="nx">f</span><span class="o">(</span><span class="nx">rp</span><span class="o">,</span> <span class="nx">sp</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
                 <span class="k">break</span><span class="o">;</span>
             <span class="nx">case</span> <span class="m">2</span><span class="o">:</span> <span class="c">// object to object and proto to proto</span>
<span class="c"></span>                 <span class="nx">f</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">s</span><span class="o">);</span>
                 <span class="nx">f</span><span class="o">(</span><span class="nx">rp</span><span class="o">,</span> <span class="nx">sp</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
                 <span class="k">break</span><span class="o">;</span>
             <span class="nx">case</span> <span class="m">3</span><span class="o">:</span> <span class="c">// proto to static</span>
<span class="c"></span>                 <span class="nx">f</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">sp</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
                 <span class="k">break</span><span class="o">;</span>
             <span class="nx">case</span> <span class="m">4</span><span class="o">:</span> <span class="c">// static to proto</span>
<span class="c"></span>                 <span class="nx">f</span><span class="o">(</span><span class="nx">rp</span><span class="o">,</span> <span class="nx">s</span><span class="o">);</span>
                 <span class="k">break</span><span class="o">;</span>
             <span class="nx">default</span><span class="o">:</span>  <span class="c">// object to object</span>
<span class="c"></span>                 <span class="nx">f</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">s</span><span class="o">);</span>
         <span class="o">}</span>

         <span class="k">return</span> <span class="nx">r</span><span class="o">;</span>
     <span class="o">};</span>
     
     <span class="c">/**</span>
<span class="c">      * Applies prototype properties from the supplier to the receiver.</span>
<span class="c">      * The receiver can be a constructor or an instance.</span>
<span class="c">      * @method augment</span>
<span class="c">      * @param {Function} r  the object to receive the augmentation</span>
<span class="c">      * @param {Function} s  the object that supplies the properties to augment</span>
<span class="c">      * @param ov {boolean} if true, properties already on the receiver</span>
<span class="c">      * will be overwritten if found on the supplier.</span>
<span class="c">      * @param wl {string[]} a whitelist.  If supplied, only properties in </span>
<span class="c">      * this list will be applied to the receiver.</span>
<span class="c">      * @param args {Array | Any} arg or arguments to apply to the supplier</span>
<span class="c">      * constructor when initializing.</span>
<span class="c">      * @return {object} the augmented object</span>
<span class="c">      */</span>
     <span class="nx">O</span><span class="o">.</span><span class="nx">augment</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">ov</span><span class="o">,</span> <span class="nx">wl</span><span class="o">,</span> <span class="nx">args</span><span class="o">)</span> <span class="o">{</span>

         <span class="k">var</span> <span class="nx">sProto</span> <span class="o">=</span> <span class="nx">s</span><span class="o">.</span><span class="nx">prototype</span><span class="o">,</span> <span class="nx">newProto</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span> <span class="nx">construct</span> <span class="o">=</span> <span class="nx">s</span><span class="o">,</span> 
             <span class="nx">a</span> <span class="o">=</span> <span class="o">(</span><span class="nx">args</span><span class="o">)</span> <span class="o">?</span> <span class="nx">A</span><span class="o">.</span><span class="nb">Array</span><span class="o">(</span><span class="nx">args</span><span class="o">)</span> <span class="o">:</span> <span class="o">[],</span> <span class="nx">rProto</span> <span class="o">=</span> <span class="nx">r</span><span class="o">.</span><span class="nx">prototype</span><span class="o">,</span> 
             <span class="nx">target</span> <span class="o">=</span>  <span class="nx">rProto</span> <span class="o">||</span> <span class="nx">r</span><span class="o">,</span> <span class="nx">applyConstructor</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

         <span class="c">// working on a class, so apply constructor infrastructure</span>
<span class="c"></span>         <span class="k">if</span> <span class="o">(</span><span class="nx">rProto</span> <span class="o">&amp;&amp;</span> <span class="nx">construct</span><span class="o">)</span> <span class="o">{</span>


             <span class="c">// Y.Do.before(r, construct);</span>
<span class="c"></span>
             <span class="k">var</span> <span class="nx">sequestered</span> <span class="o">=</span> <span class="o">{},</span> <span class="nx">replacements</span> <span class="o">=</span> <span class="o">{};</span>
             <span class="nx">newProto</span> <span class="o">=</span> <span class="o">{};</span>

             <span class="c">// sequester all of the functions in the supplier and replace with</span>
<span class="c"></span>             <span class="c">// one that will restore all of them.</span>
<span class="c"></span>             <span class="nx">A</span><span class="o">.</span><span class="nb">Object</span><span class="o">.</span><span class="nx">each</span><span class="o">(</span><span class="nx">sProto</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">v</span><span class="o">,</span> <span class="nx">k</span><span class="o">)</span> <span class="o">{</span>


                 <span class="c">// var initialized = false;</span>
<span class="c"></span>
                 <span class="nx">replacements</span><span class="o">[</span><span class="nx">k</span><span class="o">]</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>

                     <span class="k">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>


                     <span class="c">// overwrite the prototype with all of the sequestered functions,</span>
<span class="c"></span>                     <span class="c">// but only if it hasn&#39;t been overridden</span>
<span class="c"></span>                     <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">sequestered</span><span class="o">)</span> <span class="o">{</span>
                         <span class="k">if</span> <span class="o">(</span><span class="nx">sequestered</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">(</span><span class="nx">i</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">me</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">===</span> <span class="nx">replacements</span><span class="o">[</span><span class="nx">i</span><span class="o">]))</span> <span class="o">{</span>
                             <span class="nx">me</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">sequestered</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
                         <span class="o">}</span>
                     <span class="o">}</span>

                     <span class="c">// apply the constructor</span>
<span class="c"></span>                     <span class="nx">construct</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">me</span><span class="o">,</span> <span class="nx">a</span><span class="o">);</span>

                     <span class="c">// apply the original sequestered function</span>
<span class="c"></span>                     <span class="k">return</span> <span class="nx">sequestered</span><span class="o">[</span><span class="nx">k</span><span class="o">].</span><span class="nx">apply</span><span class="o">(</span><span class="nx">me</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>

                 <span class="o">};</span>

                 <span class="k">if</span> <span class="o">((!</span><span class="nx">wl</span> <span class="o">||</span> <span class="o">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">wl</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">ov</span> <span class="o">||</span> <span class="o">!(</span><span class="nx">k</span> <span class="k">in</span> <span class="k">this</span><span class="o">)))</span> <span class="o">{</span>


                     <span class="k">if</span> <span class="o">(</span><span class="nx">L</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">v</span><span class="o">))</span> <span class="o">{</span>

                         <span class="c">// sequester the function</span>
<span class="c"></span>                         <span class="nx">sequestered</span><span class="o">[</span><span class="nx">k</span><span class="o">]</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>

                         <span class="c">// replace the sequestered function with a function that will</span>
<span class="c"></span>                         <span class="c">// restore all sequestered functions and exectue the constructor.</span>
<span class="c"></span>                         <span class="k">this</span><span class="o">[</span><span class="nx">k</span><span class="o">]</span> <span class="o">=</span> <span class="nx">replacements</span><span class="o">[</span><span class="nx">k</span><span class="o">];</span>

                     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>


                         <span class="k">this</span><span class="o">[</span><span class="nx">k</span><span class="o">]</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                     <span class="o">}</span>

                 <span class="o">}</span>

             <span class="o">},</span> <span class="nx">newProto</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>

         <span class="c">// augmenting an instance, so apply the constructor immediately</span>
<span class="c"></span>         <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
             <span class="nx">applyConstructor</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
         <span class="o">}</span>

         <span class="k">this</span><span class="o">.</span><span class="nx">mix</span><span class="o">(</span><span class="nx">target</span><span class="o">,</span> <span class="nx">newProto</span> <span class="o">||</span> <span class="nx">sProto</span><span class="o">,</span> <span class="nx">ov</span><span class="o">,</span> <span class="nx">wl</span><span class="o">);</span>

         <span class="k">if</span> <span class="o">(</span><span class="nx">applyConstructor</span><span class="o">)</span> <span class="o">{</span>
             <span class="nx">s</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">target</span><span class="o">,</span> <span class="nx">a</span><span class="o">);</span>
         <span class="o">}</span>

         <span class="k">return</span> <span class="nx">r</span><span class="o">;</span>
     <span class="o">};</span>
     
     <span class="c">/**</span>
<span class="c">      * Utility to set up the prototype, constructor and superclass properties to</span>
<span class="c">      * support an inheritance strategy that can chain constructors and methods.</span>
<span class="c">      * Static members will not be inherited.</span>
<span class="c">      *</span>
<span class="c">      * @method extend</span>
<span class="c">      * @param {Function} r   the object to modify</span>
<span class="c">      * @param {Function} s the object to inherit</span>
<span class="c">      * @param {Object} px prototype properties to add/override</span>
<span class="c">      * @param {Object} sx static properties to add/override</span>
<span class="c">      * @return {AP} new class</span>
<span class="c">      */</span>
     <span class="nx">O</span><span class="o">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">px</span><span class="o">,</span> <span class="nx">sx</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">var</span> <span class="nx">sp</span> <span class="o">=</span> <span class="nx">s</span><span class="o">.</span><span class="nx">prototype</span><span class="o">,</span> <span class="nx">rp</span><span class="o">=</span><span class="nx">A</span><span class="o">.</span><span class="nb">Object</span><span class="o">(</span><span class="nx">sp</span><span class="o">),</span> <span class="nx">i</span><span class="o">;</span>
         <span class="nx">r</span><span class="o">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nx">rp</span><span class="o">;</span>

         <span class="nx">rp</span><span class="o">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">r</span><span class="o">;</span>
         <span class="nx">r</span><span class="o">.</span><span class="nx">superclass</span><span class="o">=</span><span class="nx">sp</span><span class="o">;</span>

         <span class="c">// If the superclass doesn&#39;t have a standard constructor,</span>
<span class="c"></span>         <span class="c">// define one so that Super() works</span>
<span class="c"></span>         <span class="k">if</span> <span class="o">(</span><span class="nx">s</span> <span class="o">!=</span> <span class="nb">Object</span> <span class="o">&amp;&amp;</span> <span class="nx">sp</span><span class="o">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nx">OP</span><span class="o">.</span><span class="nx">constructor</span><span class="o">)</span> <span class="o">{</span>
             <span class="nx">sp</span><span class="o">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">s</span><span class="o">;</span>
         <span class="o">}</span>

         <span class="c">// Add object properties too</span>
<span class="c"></span>         <span class="c">// TODO: removed for now because it isn&#39;t that useful and</span>
<span class="c"></span>         <span class="c">// has caused a few issues overwriting things that should</span>
<span class="c"></span>         <span class="c">// not be.  You can do this manually if needed.  Revisit</span>
<span class="c"></span>         <span class="c">// if this is something that really is needed for some</span>
<span class="c"></span>         <span class="c">// reason.</span>
<span class="c"></span>         <span class="c">// A.mix(r, s);</span>
<span class="c"></span>
         <span class="c">// Add superclass convienience functions </span>
<span class="c"></span>         <span class="c">// TODO: revisit when we have something that works</span>
<span class="c"></span>         <span class="c">// A.augment(r, Ext);</span>
<span class="c"></span>
         <span class="c">// Add prototype overrides</span>
<span class="c"></span>         <span class="k">if</span> <span class="o">(</span><span class="nx">px</span><span class="o">)</span> <span class="o">{</span>
             <span class="nx">O</span><span class="o">.</span><span class="nx">mix</span><span class="o">(</span><span class="nx">rp</span><span class="o">,</span> <span class="nx">px</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
         <span class="o">}</span>

         <span class="c">// Add object overrides</span>
<span class="c"></span>         <span class="k">if</span> <span class="o">(</span><span class="nx">sx</span><span class="o">)</span> <span class="o">{</span>
             <span class="nx">O</span><span class="o">.</span><span class="nx">mix</span><span class="o">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">sx</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
         <span class="o">}</span>

         <span class="k">return</span> <span class="nx">r</span><span class="o">;</span>
     <span class="o">};</span>
<span class="o">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">,</span> <span class="o">[</span>
    <span class="o">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;array&#39;</span><span class="o">,</span> <span class="nx">minVersion</span> <span class="o">:</span> <span class="s1">&#39;1.0.0&#39;</span> <span class="o">},</span>
    <span class="o">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;lang&#39;</span><span class="o">,</span> <span class="nx">minVersion</span> <span class="o">:</span> <span class="s1">&#39;0.0.2&#39;</span> <span class="o">},</span>
    <span class="o">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;browser&#39;</span><span class="o">,</span> <span class="nx">minVersion</span> <span class="o">:</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">},</span>
    <span class="o">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;object&#39;</span><span class="o">,</span> <span class="nx">minVersion</span> <span class="o">:</span> <span class="s1">&#39;0.0.1&#39;</span> <span class="o">}</span>
<span class="o">]);</span>
</pre></div>
