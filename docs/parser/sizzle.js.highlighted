<div class="highlight" ><pre><span class="c">/*!</span>
<span class="c"> * Sizzle CSS Selector Engine - v0.9.3</span>
<span class="c"> *  Copyright 2009, The Dojo Foundation</span>
<span class="c"> *  Released under the MIT, BSD, and GPL Licenses.</span>
<span class="c"> *  More information: http://sizzlejs.com/</span>
<span class="c"> */</span>
<span class="nx">AP</span><span class="o">.</span><span class="nx">add</span><span class="o">(</span><span class="s1">&#39;querySelector&#39;</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">A</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">chunker</span> <span class="o">=</span> <span class="sr">/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|[&#39;&quot;][^&#39;&quot;]*[&#39;&quot;]|[^[\]&#39;&quot;]+)+\]|\\.|[^ &gt;+~,(\[]+)+|[&gt;+~])(\s*,\s*)?/g</span><span class="o">,</span>
    	<span class="nx">done</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span>
    	<span class="nx">toString</span> <span class="o">=</span> <span class="nb">Object</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toString</span><span class="o">;</span>

    <span class="k">var</span> <span class="nx">Sizzle</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">selector</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">results</span><span class="o">,</span> <span class="nx">seed</span><span class="o">)</span> <span class="o">{</span>
    	<span class="nx">results</span> <span class="o">=</span> <span class="nx">results</span> <span class="o">||</span> <span class="o">[];</span>
    	<span class="nx">context</span> <span class="o">=</span> <span class="nx">context</span> <span class="o">||</span> <span class="nb">document</span><span class="o">;</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="nx">context</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">context</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="m">9</span> <span class="o">)</span>
    		<span class="k">return</span> <span class="o">[];</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">selector</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">selector</span> <span class="o">!==</span> <span class="s2">&quot;string&quot;</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">return</span> <span class="nx">results</span><span class="o">;</span>
    	<span class="o">}</span>

    	<span class="k">var</span> <span class="nx">parts</span> <span class="o">=</span> <span class="o">[],</span> <span class="nx">m</span><span class="o">,</span> <span class="nx">set</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="nx">check</span><span class="o">,</span> <span class="nx">mode</span><span class="o">,</span> <span class="nx">extra</span><span class="o">,</span> <span class="nx">prune</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

    	<span class="c">// Reset the position of the chunker regexp (start from head)</span>
<span class="c"></span>    	<span class="nx">chunker</span><span class="o">.</span><span class="nx">lastIndex</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>

    	<span class="k">while</span> <span class="o">(</span> <span class="o">(</span><span class="nx">m</span> <span class="o">=</span> <span class="nx">chunker</span><span class="o">.</span><span class="nx">exec</span><span class="o">(</span><span class="nx">selector</span><span class="o">))</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">parts</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">m</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">);</span>

    		<span class="k">if</span> <span class="o">(</span> <span class="nx">m</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="nx">extra</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="o">.</span><span class="nx">rightContext</span><span class="o">;</span>
    			<span class="k">break</span><span class="o">;</span>
    		<span class="o">}</span>
    	<span class="o">}</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">origPOS</span><span class="o">.</span><span class="nx">exec</span><span class="o">(</span> <span class="nx">selector</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">if</span> <span class="o">(</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">length</span> <span class="o">===</span> <span class="m">2</span> <span class="o">&amp;&amp;</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">relative</span><span class="o">[</span> <span class="nx">parts</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="nx">set</span> <span class="o">=</span> <span class="nx">posProcess</span><span class="o">(</span> <span class="nx">parts</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">+</span> <span class="nx">parts</span><span class="o">[</span><span class="m">1</span><span class="o">],</span> <span class="nx">context</span> <span class="o">);</span>
    		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    			<span class="nx">set</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">relative</span><span class="o">[</span> <span class="nx">parts</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">]</span> <span class="o">?</span>
    				<span class="o">[</span> <span class="nx">context</span> <span class="o">]</span> <span class="o">:</span>
    				<span class="nx">Sizzle</span><span class="o">(</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">shift</span><span class="o">(),</span> <span class="nx">context</span> <span class="o">);</span>

    			<span class="k">while</span> <span class="o">(</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">length</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">selector</span> <span class="o">=</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">shift</span><span class="o">();</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">relative</span><span class="o">[</span> <span class="nx">selector</span> <span class="o">]</span> <span class="o">)</span>
    					<span class="nx">selector</span> <span class="o">+=</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">shift</span><span class="o">();</span>

    				<span class="nx">set</span> <span class="o">=</span> <span class="nx">posProcess</span><span class="o">(</span> <span class="nx">selector</span><span class="o">,</span> <span class="nx">set</span> <span class="o">);</span>
    			<span class="o">}</span>
    		<span class="o">}</span>
    	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    		<span class="k">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">seed</span> <span class="o">?</span>
    			<span class="o">{</span> <span class="nx">expr</span><span class="o">:</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">pop</span><span class="o">(),</span> <span class="nx">set</span><span class="o">:</span> <span class="nx">makeArray</span><span class="o">(</span><span class="nx">seed</span><span class="o">)</span> <span class="o">}</span> <span class="o">:</span>
    			<span class="nx">Sizzle</span><span class="o">.</span><span class="nx">find</span><span class="o">(</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">pop</span><span class="o">(),</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">length</span> <span class="o">===</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">context</span><span class="o">.</span><span class="nx">parentNode</span> <span class="o">?</span> <span class="nx">context</span><span class="o">.</span><span class="nx">parentNode</span> <span class="o">:</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">(</span><span class="nx">context</span><span class="o">)</span> <span class="o">);</span>
    		<span class="nx">set</span> <span class="o">=</span> <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span><span class="o">(</span> <span class="nx">ret</span><span class="o">.</span><span class="nx">expr</span><span class="o">,</span> <span class="nx">ret</span><span class="o">.</span><span class="nx">set</span> <span class="o">);</span>

    		<span class="k">if</span> <span class="o">(</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="nx">checkSet</span> <span class="o">=</span> <span class="nx">makeArray</span><span class="o">(</span><span class="nx">set</span><span class="o">);</span>
    		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    			<span class="nx">prune</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    		<span class="o">}</span>

    		<span class="k">while</span> <span class="o">(</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">length</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">var</span> <span class="nx">cur</span> <span class="o">=</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">pop</span><span class="o">(),</span> <span class="nx">pop</span> <span class="o">=</span> <span class="nx">cur</span><span class="o">;</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">Expr</span><span class="o">.</span><span class="nx">relative</span><span class="o">[</span> <span class="nx">cur</span> <span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">cur</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
    			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    				<span class="nx">pop</span> <span class="o">=</span> <span class="nx">parts</span><span class="o">.</span><span class="nx">pop</span><span class="o">();</span>
    			<span class="o">}</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="nx">pop</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">pop</span> <span class="o">=</span> <span class="nx">context</span><span class="o">;</span>
    			<span class="o">}</span>

    			<span class="nx">Expr</span><span class="o">.</span><span class="nx">relative</span><span class="o">[</span> <span class="nx">cur</span> <span class="o">](</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="nx">pop</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">(</span><span class="nx">context</span><span class="o">)</span> <span class="o">);</span>
    		<span class="o">}</span>
    	<span class="o">}</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">checkSet</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">checkSet</span> <span class="o">=</span> <span class="nx">set</span><span class="o">;</span>
    	<span class="o">}</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">checkSet</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">throw</span> <span class="s2">&quot;Syntax error, unrecognized expression: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="nx">cur</span> <span class="o">||</span> <span class="nx">selector</span><span class="o">);</span>
    	<span class="o">}</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="nx">toString</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">checkSet</span><span class="o">)</span> <span class="o">===</span> <span class="s2">&quot;[object Array]&quot;</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">prune</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="nx">results</span><span class="o">.</span><span class="nx">push</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span> <span class="nx">results</span><span class="o">,</span> <span class="nx">checkSet</span> <span class="o">);</span>
    		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">context</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">if</span> <span class="o">(</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">||</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">contains</span><span class="o">(</span><span class="nx">context</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]))</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">results</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">set</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">);</span>
    				<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    			<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">if</span> <span class="o">(</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">results</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">set</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">);</span>
    				<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">}</span>
    	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    		<span class="nx">makeArray</span><span class="o">(</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="nx">results</span> <span class="o">);</span>
    	<span class="o">}</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="nx">extra</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">Sizzle</span><span class="o">(</span> <span class="nx">extra</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">results</span><span class="o">,</span> <span class="nx">seed</span> <span class="o">);</span>
    	<span class="o">}</span>

    	<span class="k">return</span> <span class="nx">results</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">matches</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">expr</span><span class="o">,</span> <span class="nx">set</span><span class="o">){</span>
    	<span class="k">return</span> <span class="nx">Sizzle</span><span class="o">(</span><span class="nx">expr</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="nx">set</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">find</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">expr</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    	<span class="k">var</span> <span class="nx">set</span><span class="o">,</span> <span class="nx">match</span><span class="o">;</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">expr</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">return</span> <span class="o">[];</span>
    	<span class="o">}</span>

    	<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">order</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">order</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">match</span><span class="o">;</span>

    		<span class="k">if</span> <span class="o">(</span> <span class="o">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">[</span> <span class="nx">type</span> <span class="o">].</span><span class="nx">exec</span><span class="o">(</span> <span class="nx">expr</span> <span class="o">))</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">var</span> <span class="nx">left</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="o">.</span><span class="nx">leftContext</span><span class="o">;</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="nx">left</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span> <span class="nx">left</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span> <span class="o">)</span> <span class="o">!==</span> <span class="s2">&quot;\\&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\\/g</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">);</span>
    				<span class="nx">set</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">find</span><span class="o">[</span> <span class="nx">type</span> <span class="o">](</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">isXML</span> <span class="o">);</span>
    				<span class="k">if</span> <span class="o">(</span> <span class="nx">set</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">expr</span> <span class="o">=</span> <span class="nx">expr</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">[</span> <span class="nx">type</span> <span class="o">],</span> <span class="s2">&quot;&quot;</span> <span class="o">);</span>
    					<span class="k">break</span><span class="o">;</span>
    				<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">}</span>
    	<span class="o">}</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">set</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">set</span> <span class="o">=</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="s2">&quot;*&quot;</span><span class="o">);</span>
    	<span class="o">}</span>

    	<span class="k">return</span> <span class="o">{</span><span class="nx">set</span><span class="o">:</span> <span class="nx">set</span><span class="o">,</span> <span class="nx">expr</span><span class="o">:</span> <span class="nx">expr</span><span class="o">};</span>
    <span class="o">};</span>

    <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">expr</span><span class="o">,</span> <span class="nx">set</span><span class="o">,</span> <span class="nx">inplace</span><span class="o">,</span> <span class="nx">not</span><span class="o">){</span>
    	<span class="k">var</span> <span class="nx">old</span> <span class="o">=</span> <span class="nx">expr</span><span class="o">,</span> <span class="nx">result</span> <span class="o">=</span> <span class="o">[],</span> <span class="nx">curLoop</span> <span class="o">=</span> <span class="nx">set</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">anyFound</span><span class="o">;</span>

    	<span class="k">while</span> <span class="o">(</span> <span class="nx">expr</span> <span class="o">&amp;&amp;</span> <span class="nx">set</span><span class="o">.</span><span class="nx">length</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">type</span> <span class="k">in</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">filter</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="o">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">[</span> <span class="nx">type</span> <span class="o">].</span><span class="nx">exec</span><span class="o">(</span> <span class="nx">expr</span> <span class="o">))</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">var</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">filter</span><span class="o">[</span> <span class="nx">type</span> <span class="o">],</span> <span class="nx">found</span><span class="o">,</span> <span class="nx">item</span><span class="o">;</span>
    				<span class="nx">anyFound</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">curLoop</span> <span class="o">==</span> <span class="nx">result</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">result</span> <span class="o">=</span> <span class="o">[];</span>
    				<span class="o">}</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">preFilter</span><span class="o">[</span> <span class="nx">type</span> <span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">match</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">preFilter</span><span class="o">[</span> <span class="nx">type</span> <span class="o">](</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">curLoop</span><span class="o">,</span> <span class="nx">inplace</span><span class="o">,</span> <span class="nx">result</span><span class="o">,</span> <span class="nx">not</span> <span class="o">);</span>

    					<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">match</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">anyFound</span> <span class="o">=</span> <span class="nx">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">match</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">continue</span><span class="o">;</span>
    					<span class="o">}</span>
    				<span class="o">}</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">match</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="o">(</span><span class="nx">item</span> <span class="o">=</span> <span class="nx">curLoop</span><span class="o">[</span><span class="nx">i</span><span class="o">])</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">if</span> <span class="o">(</span> <span class="nx">item</span> <span class="o">)</span> <span class="o">{</span>
    							<span class="nx">found</span> <span class="o">=</span> <span class="nx">filter</span><span class="o">(</span> <span class="nx">item</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">curLoop</span> <span class="o">);</span>
    							<span class="k">var</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">not</span> <span class="o">^</span> <span class="o">!!</span><span class="nx">found</span><span class="o">;</span>

    							<span class="k">if</span> <span class="o">(</span> <span class="nx">inplace</span> <span class="o">&amp;&amp;</span> <span class="nx">found</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
    								<span class="k">if</span> <span class="o">(</span> <span class="nx">pass</span> <span class="o">)</span> <span class="o">{</span>
    									<span class="nx">anyFound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    								<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    									<span class="nx">curLoop</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    								<span class="o">}</span>
    							<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">pass</span> <span class="o">)</span> <span class="o">{</span>
    								<span class="nx">result</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">item</span> <span class="o">);</span>
    								<span class="nx">anyFound</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    							<span class="o">}</span>
    						<span class="o">}</span>
    					<span class="o">}</span>
    				<span class="o">}</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">found</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">inplace</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">curLoop</span> <span class="o">=</span> <span class="nx">result</span><span class="o">;</span>
    					<span class="o">}</span>

    					<span class="nx">expr</span> <span class="o">=</span> <span class="nx">expr</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">[</span> <span class="nx">type</span> <span class="o">],</span> <span class="s2">&quot;&quot;</span> <span class="o">);</span>

    					<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">anyFound</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">return</span> <span class="o">[];</span>
    					<span class="o">}</span>

    					<span class="k">break</span><span class="o">;</span>
    				<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">}</span>

    		<span class="nx">expr</span> <span class="o">=</span> <span class="nx">expr</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\s*,\s*/</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">);</span>

    		<span class="c">// Improper expression</span>
<span class="c"></span>    		<span class="k">if</span> <span class="o">(</span> <span class="nx">expr</span> <span class="o">==</span> <span class="nx">old</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="nx">anyFound</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">throw</span> <span class="s2">&quot;Syntax error, unrecognized expression: &quot;</span> <span class="o">+</span> <span class="nx">expr</span><span class="o">;</span>
    			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    				<span class="k">break</span><span class="o">;</span>
    			<span class="o">}</span>
    		<span class="o">}</span>

    		<span class="nx">old</span> <span class="o">=</span> <span class="nx">expr</span><span class="o">;</span>
    	<span class="o">}</span>

    	<span class="k">return</span> <span class="nx">curLoop</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="k">var</span> <span class="nx">Expr</span> <span class="o">=</span> <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">selectors</span> <span class="o">=</span> <span class="o">{</span>
    	<span class="nx">order</span><span class="o">:</span> <span class="o">[</span> <span class="s2">&quot;ID&quot;</span><span class="o">,</span> <span class="s2">&quot;NAME&quot;</span><span class="o">,</span> <span class="s2">&quot;TAG&quot;</span> <span class="o">],</span>
    	<span class="nx">match</span><span class="o">:</span> <span class="o">{</span>
    		<span class="nx">ID</span><span class="o">:</span> <span class="sr">/#((?:[\w\u00c0-\uFFFF_-]|\\.)+)/</span><span class="o">,</span>
    		<span class="nx">CLASS</span><span class="o">:</span> <span class="sr">/\.((?:[\w\u00c0-\uFFFF_-]|\\.)+)/</span><span class="o">,</span>
    		<span class="nx">NAME</span><span class="o">:</span> <span class="sr">/\[name=[&#39;&quot;]*((?:[\w\u00c0-\uFFFF_-]|\\.)+)[&#39;&quot;]*\]/</span><span class="o">,</span>
    		<span class="nx">ATTR</span><span class="o">:</span> <span class="sr">/\[\s*((?:[\w\u00c0-\uFFFF_-]|\\.)+)\s*(?:(\S?=)\s*([&#39;&quot;]*)(.*?)\3|)\s*\]/</span><span class="o">,</span>
    		<span class="nx">TAG</span><span class="o">:</span> <span class="sr">/^((?:[\w\u00c0-\uFFFF\*_-]|\\.)+)/</span><span class="o">,</span>
    		<span class="nx">CHILD</span><span class="o">:</span> <span class="sr">/:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/</span><span class="o">,</span>
    		<span class="nx">POS</span><span class="o">:</span> <span class="sr">/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/</span><span class="o">,</span>
    		<span class="nx">PSEUDO</span><span class="o">:</span> <span class="sr">/:((?:[\w\u00c0-\uFFFF_-]|\\.)+)(?:\(([&#39;&quot;]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/</span>
    	<span class="o">},</span>
    	<span class="nx">attrMap</span><span class="o">:</span> <span class="o">{</span>
    		<span class="s2">&quot;class&quot;</span><span class="o">:</span> <span class="s2">&quot;className&quot;</span><span class="o">,</span>
    		<span class="s2">&quot;for&quot;</span><span class="o">:</span> <span class="s2">&quot;htmlFor&quot;</span>
    	<span class="o">},</span>
    	<span class="nx">attrHandle</span><span class="o">:</span> <span class="o">{</span>
    		<span class="nx">href</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">getAttribute</span><span class="o">(</span><span class="s2">&quot;href&quot;</span><span class="o">);</span>
    		<span class="o">}</span>
    	<span class="o">},</span>
    	<span class="nx">relative</span><span class="o">:</span> <span class="o">{</span>
    		<span class="s2">&quot;+&quot;</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">checkSet</span><span class="o">,</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    			<span class="k">var</span>	<span class="nx">isPartStr</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">part</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span><span class="o">,</span>
    				<span class="nx">isTag</span> <span class="o">=</span> <span class="nx">isPartStr</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="sr">/\W/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">part</span><span class="o">),</span>
    				<span class="nx">isPartStrNotTag</span> <span class="o">=</span> <span class="nx">isPartStr</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isTag</span><span class="o">;</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="nx">isTag</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span> <span class="o">)</span> <span class="nx">part</span> <span class="o">=</span> <span class="nx">part</span><span class="o">.</span><span class="nx">toUpperCase</span><span class="o">();</span>
    			<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">.</span><span class="nx">length</span><span class="o">,</span> <span class="nx">elem</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">while</span> <span class="o">(</span> <span class="o">(</span><span class="nx">elem</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">previousSibling</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{};</span>
    					<span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">isPartStrNotTag</span> <span class="o">||</span> <span class="nx">elem</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">===</span> <span class="nx">part</span> <span class="o">?</span>
    						 <span class="nx">elem</span> <span class="o">:</span> <span class="nx">elem</span> <span class="o">===</span> <span class="nx">part</span><span class="o">;</span>
    				<span class="o">}</span>
    			<span class="o">}</span>
    			<span class="k">if</span> <span class="o">(</span><span class="nx">isPartStrNotTag</span><span class="o">)</span> <span class="o">{</span>
    				<span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span><span class="o">(</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="kc">true</span> <span class="o">);</span>
    			<span class="o">}</span>
    		<span class="o">},</span>
    		<span class="s2">&quot;&gt;&quot;</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">checkSet</span><span class="o">,</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">part</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="sr">/\W/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">part</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">part</span> <span class="o">=</span> <span class="nx">isXML</span> <span class="o">?</span> <span class="nx">part</span> <span class="o">:</span> <span class="nx">part</span><span class="o">.</span><span class="nx">toUpperCase</span><span class="o">();</span>

    				<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>
    						<span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">parent</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">===</span> <span class="nx">part</span> <span class="o">?</span> <span class="nx">parent</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
    					<span class="o">}</span>
    				<span class="o">}</span>
    			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    				<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">part</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">?</span>
    							<span class="nx">elem</span><span class="o">.</span><span class="nx">parentNode</span> <span class="o">:</span>
    							<span class="nx">elem</span><span class="o">.</span><span class="nx">parentNode</span> <span class="o">===</span> <span class="nx">part</span><span class="o">;</span>
    					<span class="o">}</span>
    				<span class="o">}</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">part</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span><span class="o">(</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="kc">true</span> <span class="o">);</span>
    				<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">},</span>
    		<span class="s2">&quot;&quot;</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">checkSet</span><span class="o">,</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">doneName</span> <span class="o">=</span> <span class="nx">done</span><span class="o">++,</span> <span class="nx">checkFn</span> <span class="o">=</span> <span class="nx">dirCheck</span><span class="o">;</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">part</span><span class="o">.</span><span class="nx">match</span><span class="o">(</span><span class="sr">/\W/</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">var</span> <span class="nx">nodeCheck</span> <span class="o">=</span> <span class="nx">part</span> <span class="o">=</span> <span class="nx">isXML</span> <span class="o">?</span> <span class="nx">part</span> <span class="o">:</span> <span class="nx">part</span><span class="o">.</span><span class="nx">toUpperCase</span><span class="o">();</span>
    				<span class="nx">checkFn</span> <span class="o">=</span> <span class="nx">dirNodeCheck</span><span class="o">;</span>
    			<span class="o">}</span>

    			<span class="nx">checkFn</span><span class="o">(</span><span class="s2">&quot;parentNode&quot;</span><span class="o">,</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">doneName</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="nx">nodeCheck</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">);</span>
    		<span class="o">},</span>
    		<span class="s2">&quot;~&quot;</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">checkSet</span><span class="o">,</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">doneName</span> <span class="o">=</span> <span class="nx">done</span><span class="o">++,</span> <span class="nx">checkFn</span> <span class="o">=</span> <span class="nx">dirCheck</span><span class="o">;</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">part</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">part</span><span class="o">.</span><span class="nx">match</span><span class="o">(</span><span class="sr">/\W/</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">var</span> <span class="nx">nodeCheck</span> <span class="o">=</span> <span class="nx">part</span> <span class="o">=</span> <span class="nx">isXML</span> <span class="o">?</span> <span class="nx">part</span> <span class="o">:</span> <span class="nx">part</span><span class="o">.</span><span class="nx">toUpperCase</span><span class="o">();</span>
    				<span class="nx">checkFn</span> <span class="o">=</span> <span class="nx">dirNodeCheck</span><span class="o">;</span>
    			<span class="o">}</span>

    			<span class="nx">checkFn</span><span class="o">(</span><span class="s2">&quot;previousSibling&quot;</span><span class="o">,</span> <span class="nx">part</span><span class="o">,</span> <span class="nx">doneName</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="nx">nodeCheck</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">);</span>
    		<span class="o">}</span>
    	<span class="o">},</span>
    	<span class="nx">find</span><span class="o">:</span> <span class="o">{</span>
    		<span class="nx">ID</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementById</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementById</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]);</span>
    				<span class="k">return</span> <span class="nx">m</span> <span class="o">?</span> <span class="o">[</span><span class="nx">m</span><span class="o">]</span> <span class="o">:</span> <span class="o">[];</span>
    			<span class="o">}</span>
    		<span class="o">},</span>
    		<span class="nx">NAME</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementsByName</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">return</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementsByName</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]);</span>
    			<span class="o">}</span>
    		<span class="o">},</span>
    		<span class="nx">TAG</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">context</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]);</span>
    		<span class="o">}</span>
    	<span class="o">},</span>
    	<span class="nx">preFilter</span><span class="o">:</span> <span class="o">{</span>
    		<span class="nx">CLASS</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">curLoop</span><span class="o">,</span> <span class="nx">inplace</span><span class="o">,</span> <span class="nx">result</span><span class="o">,</span> <span class="nx">not</span><span class="o">){</span>
    			<span class="nx">match</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">].</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\\/g</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="o">;</span>

    			<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">elem</span><span class="o">;</span> <span class="o">(</span><span class="nx">elem</span> <span class="o">=</span> <span class="nx">curLoop</span><span class="o">[</span><span class="nx">i</span><span class="o">])</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="nx">not</span> <span class="o">^</span> <span class="o">(</span><span class="nx">elem</span><span class="o">.</span><span class="nx">className</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">className</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="o">).</span><span class="nx">indexOf</span><span class="o">(</span><span class="nx">match</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">inplace</span> <span class="o">)</span>
    							<span class="nx">result</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">elem</span> <span class="o">);</span>
    					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">inplace</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">curLoop</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    					<span class="o">}</span>
    				<span class="o">}</span>
    			<span class="o">}</span>

    			<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">ID</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">].</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\\/g</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">);</span>
    		<span class="o">},</span>
    		<span class="nx">TAG</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">curLoop</span><span class="o">){</span>
    			<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">curLoop</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">===</span> <span class="kc">false</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">){}</span>
    			<span class="k">return</span> <span class="nx">curLoop</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nx">isXML</span><span class="o">(</span><span class="nx">curLoop</span><span class="o">[</span><span class="nx">i</span><span class="o">])</span> <span class="o">?</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">:</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">].</span><span class="nx">toUpperCase</span><span class="o">();</span>
    		<span class="o">},</span>
    		<span class="nx">CHILD</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">){</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;nth&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="c">// parse equations like &#39;even&#39;, &#39;odd&#39;, &#39;5&#39;, &#39;2n&#39;, &#39;3n+2&#39;, &#39;4n-1&#39;, &#39;-n+6&#39;</span>
<span class="c"></span>    				<span class="k">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="sr">/(-?)(\d*)n((?:\+|-)?\d*)/</span><span class="o">.</span><span class="nx">exec</span><span class="o">(</span>
    					<span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;even&quot;</span> <span class="o">&amp;&amp;</span> <span class="s2">&quot;2n&quot;</span> <span class="o">||</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;odd&quot;</span> <span class="o">&amp;&amp;</span> <span class="s2">&quot;2n+1&quot;</span> <span class="o">||</span>
    					<span class="o">!</span><span class="sr">/\D/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s2">&quot;0n+&quot;</span> <span class="o">+</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">||</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">]);</span>

    				<span class="c">// calculate the numbers (first)n+(last) including if they are negative</span>
<span class="c"></span>    				<span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="nx">test</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">(</span><span class="nx">test</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">||</span> <span class="m">1</span><span class="o">))</span> <span class="o">-</span> <span class="m">0</span><span class="o">;</span>
    				<span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">]</span> <span class="o">=</span> <span class="nx">test</span><span class="o">[</span><span class="m">3</span><span class="o">]</span> <span class="o">-</span> <span class="m">0</span><span class="o">;</span>
    			<span class="o">}</span>

    			<span class="c">// TODO: Move to normal caching system</span>
<span class="c"></span>    			<span class="nx">match</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">=</span> <span class="nx">done</span><span class="o">++;</span>

    			<span class="k">return</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">ATTR</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">].</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\\/g</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">);</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">attrMap</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">attrMap</span><span class="o">[</span><span class="nx">name</span><span class="o">];</span>
    			<span class="o">}</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">]</span> <span class="o">===</span> <span class="s2">&quot;~=&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">match</span><span class="o">[</span><span class="m">4</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">match</span><span class="o">[</span><span class="m">4</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="o">;</span>
    			<span class="o">}</span>

    			<span class="k">return</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">PSEUDO</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">curLoop</span><span class="o">,</span> <span class="nx">inplace</span><span class="o">,</span> <span class="nx">result</span><span class="o">,</span> <span class="nx">not</span><span class="o">){</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">===</span> <span class="s2">&quot;not&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="c">// If we&#39;re dealing with a complex expression, or a simple one</span>
<span class="c"></span>    				<span class="k">if</span> <span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">].</span><span class="nx">match</span><span class="o">(</span><span class="nx">chunker</span><span class="o">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">]</span> <span class="o">=</span> <span class="nx">Sizzle</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">],</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="nx">curLoop</span><span class="o">);</span>
    				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    					<span class="k">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">],</span> <span class="nx">curLoop</span><span class="o">,</span> <span class="nx">inplace</span><span class="o">,</span> <span class="kc">true</span> <span class="o">^</span> <span class="nx">not</span><span class="o">);</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">inplace</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">result</span><span class="o">.</span><span class="nx">push</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span> <span class="nx">result</span><span class="o">,</span> <span class="nx">ret</span> <span class="o">);</span>
    					<span class="o">}</span>
    					<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    				<span class="o">}</span>
    			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">.</span><span class="nx">POS</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    			<span class="o">}</span>

    			<span class="k">return</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">POS</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">){</span>
    			<span class="nx">match</span><span class="o">.</span><span class="nx">unshift</span><span class="o">(</span> <span class="kc">true</span> <span class="o">);</span>
    			<span class="k">return</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">}</span>
    	<span class="o">},</span>
    	<span class="nx">filters</span><span class="o">:</span> <span class="o">{</span>
    		<span class="nx">enabled</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">disabled</span> <span class="o">===</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span> <span class="o">!==</span> <span class="s2">&quot;hidden&quot;</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">disabled</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">disabled</span> <span class="o">===</span> <span class="kc">true</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">checked</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">checked</span> <span class="o">===</span> <span class="kc">true</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">selected</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="c">// Accessing this property makes selected-by-default</span>
<span class="c"></span>    			<span class="c">// options in Safari work properly</span>
<span class="c"></span>    			<span class="nx">elem</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">.</span><span class="nx">selectedIndex</span><span class="o">;</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">selected</span> <span class="o">===</span> <span class="kc">true</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">parent</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="o">!!</span><span class="nx">elem</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">empty</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="o">!</span><span class="nx">elem</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">has</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="o">!!</span><span class="nx">Sizzle</span><span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">],</span> <span class="nx">elem</span> <span class="o">).</span><span class="nx">length</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">header</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="sr">/h\d/i</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">);</span>
    		<span class="o">},</span>
    		<span class="nx">text</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;text&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">radio</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;radio&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">checkbox</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;checkbox&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">file</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;file&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">password</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;password&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">submit</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;submit&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">image</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;image&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">reset</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;reset&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">button</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="s2">&quot;button&quot;</span> <span class="o">===</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">type</span> <span class="o">||</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeName</span><span class="o">.</span><span class="nx">toUpperCase</span><span class="o">()</span> <span class="o">===</span> <span class="s2">&quot;BUTTON&quot;</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">input</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="sr">/input|select|textarea|button/i</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">elem</span><span class="o">.</span><span class="nx">nodeName</span><span class="o">);</span>
    		<span class="o">}</span>
    	<span class="o">},</span>
    	<span class="nx">setFilters</span><span class="o">:</span> <span class="o">{</span>
    		<span class="nx">first</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">i</span> <span class="o">===</span> <span class="m">0</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">last</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">array</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">array</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">even</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">i</span> <span class="o">%</span> <span class="m">2</span> <span class="o">===</span> <span class="m">0</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">odd</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">i</span> <span class="o">%</span> <span class="m">2</span> <span class="o">===</span> <span class="m">1</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">lt</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">]</span> <span class="o">-</span> <span class="m">0</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">gt</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">]</span> <span class="o">-</span> <span class="m">0</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">nth</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">]</span> <span class="o">-</span> <span class="m">0</span> <span class="o">==</span> <span class="nx">i</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">eq</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">]</span> <span class="o">-</span> <span class="m">0</span> <span class="o">==</span> <span class="nx">i</span><span class="o">;</span>
    		<span class="o">}</span>
    	<span class="o">},</span>
    	<span class="nx">filter</span><span class="o">:</span> <span class="o">{</span>
    		<span class="nx">CHILD</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">],</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">;</span>
    			<span class="nx">switch</span> <span class="o">(</span><span class="nx">type</span><span class="o">)</span> <span class="o">{</span>
    				<span class="nx">case</span> <span class="s1">&#39;only&#39;</span><span class="o">:</span>
    				<span class="nx">case</span> <span class="s1">&#39;first&#39;</span><span class="o">:</span>
    					<span class="k">while</span> <span class="o">(</span><span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">previousSibling</span><span class="o">)</span>  <span class="o">{</span>
    						<span class="k">if</span> <span class="o">(</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    					<span class="o">}</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;first&#39;</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    					<span class="nx">node</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">;</span>
    				<span class="nx">case</span> <span class="s1">&#39;last&#39;</span><span class="o">:</span>
    					<span class="k">while</span> <span class="o">(</span><span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nextSibling</span><span class="o">)</span>  <span class="o">{</span>
    						<span class="k">if</span> <span class="o">(</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    					<span class="o">}</span>
    					<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    				<span class="nx">case</span> <span class="s1">&#39;nth&#39;</span><span class="o">:</span>
    					<span class="k">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">],</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">];</span>

    					<span class="k">if</span> <span class="o">(</span> <span class="nx">first</span> <span class="o">==</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">last</span> <span class="o">==</span> <span class="m">0</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    					<span class="o">}</span>

    					<span class="k">var</span> <span class="nx">doneName</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">0</span><span class="o">],</span>
    						<span class="nx">parent</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>

    					<span class="k">if</span> <span class="o">(</span> <span class="nx">parent</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">parent</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">!==</span> <span class="nx">doneName</span> <span class="o">||</span> <span class="o">!</span><span class="nx">elem</span><span class="o">.</span><span class="nx">nodeIndex</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>
    						<span class="k">for</span> <span class="o">(</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">parent</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">;</span> <span class="nx">node</span><span class="o">;</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nextSibling</span> <span class="o">)</span> <span class="o">{</span>
    							<span class="k">if</span> <span class="o">(</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{</span>
    								<span class="nx">node</span><span class="o">.</span><span class="nx">nodeIndex</span> <span class="o">=</span> <span class="o">++</span><span class="nx">count</span><span class="o">;</span>
    							<span class="o">}</span>
    						<span class="o">}</span> 
    						<span class="nx">parent</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">=</span> <span class="nx">doneName</span><span class="o">;</span>
    					<span class="o">}</span>

    					<span class="k">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeIndex</span> <span class="o">-</span> <span class="nx">last</span><span class="o">;</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="nx">first</span> <span class="o">==</span> <span class="m">0</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">return</span> <span class="nx">diff</span> <span class="o">==</span> <span class="m">0</span><span class="o">;</span>
    					<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    						<span class="k">return</span> <span class="o">(</span> <span class="nx">diff</span> <span class="o">%</span> <span class="nx">first</span> <span class="o">==</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="nx">diff</span> <span class="o">/</span> <span class="nx">first</span> <span class="o">&gt;=</span> <span class="m">0</span> <span class="o">);</span>
    					<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">},</span>
    		<span class="nx">PSEUDO</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">array</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">],</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">filters</span><span class="o">[</span> <span class="nx">name</span> <span class="o">];</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="nx">filter</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">return</span> <span class="nx">filter</span><span class="o">(</span> <span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">array</span> <span class="o">);</span>
    			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;contains&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">return</span> <span class="o">(</span><span class="nx">elem</span><span class="o">.</span><span class="nx">textContent</span> <span class="o">||</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">innerText</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="o">).</span><span class="nx">indexOf</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">])</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span>
    			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;not&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">var</span> <span class="nx">not</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">3</span><span class="o">];</span>

    				<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">not</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="nx">not</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">===</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    					<span class="o">}</span>
    				<span class="o">}</span>

    				<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    			<span class="o">}</span>
    		<span class="o">},</span>
    		<span class="nx">ID</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">getAttribute</span><span class="o">(</span><span class="s2">&quot;id&quot;</span><span class="o">)</span> <span class="o">===</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">TAG</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="o">(</span><span class="nx">match</span> <span class="o">===</span> <span class="s2">&quot;*&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span><span class="o">)</span> <span class="o">||</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">===</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">CLASS</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">match</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">className</span> <span class="o">);</span>
    		<span class="o">},</span>
    		<span class="nx">ATTR</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">],</span>
    				<span class="nx">result</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">attrHandle</span><span class="o">[</span> <span class="nx">name</span> <span class="o">]</span> <span class="o">?</span>
    					<span class="nx">Expr</span><span class="o">.</span><span class="nx">attrHandle</span><span class="o">[</span> <span class="nx">name</span> <span class="o">](</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">:</span>
    					<span class="nx">elem</span><span class="o">[</span> <span class="nx">name</span> <span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span>
    						<span class="nx">elem</span><span class="o">[</span> <span class="nx">name</span> <span class="o">]</span> <span class="o">:</span>
    						<span class="nx">elem</span><span class="o">.</span><span class="nx">getAttribute</span><span class="o">(</span> <span class="nx">name</span> <span class="o">),</span>
    				<span class="nx">value</span> <span class="o">=</span> <span class="nx">result</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="o">,</span>
    				<span class="nx">type</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">],</span>
    				<span class="nx">check</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">4</span><span class="o">];</span>

    			<span class="k">return</span> <span class="nx">result</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;!=&quot;</span> <span class="o">:</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;=&quot;</span> <span class="o">?</span>
    				<span class="nx">value</span> <span class="o">===</span> <span class="nx">check</span> <span class="o">:</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;*=&quot;</span> <span class="o">?</span>
    				<span class="nx">value</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="nx">check</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="m">0</span> <span class="o">:</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;~=&quot;</span> <span class="o">?</span>
    				<span class="o">(</span><span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="o">).</span><span class="nx">indexOf</span><span class="o">(</span><span class="nx">check</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="m">0</span> <span class="o">:</span>
    				<span class="o">!</span><span class="nx">check</span> <span class="o">?</span>
    				<span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="nx">result</span> <span class="o">!==</span> <span class="kc">false</span> <span class="o">:</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;!=&quot;</span> <span class="o">?</span>
    				<span class="nx">value</span> <span class="o">!=</span> <span class="nx">check</span> <span class="o">:</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;^=&quot;</span> <span class="o">?</span>
    				<span class="nx">value</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="nx">check</span><span class="o">)</span> <span class="o">===</span> <span class="m">0</span> <span class="o">:</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;$=&quot;</span> <span class="o">?</span>
    				<span class="nx">value</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="nx">value</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">check</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">===</span> <span class="nx">check</span> <span class="o">:</span>
    				<span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;|=&quot;</span> <span class="o">?</span>
    				<span class="nx">value</span> <span class="o">===</span> <span class="nx">check</span> <span class="o">||</span> <span class="nx">value</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="m">0</span><span class="o">,</span> <span class="nx">check</span><span class="o">.</span><span class="nx">length</span> <span class="o">+</span> <span class="m">1</span><span class="o">)</span> <span class="o">===</span> <span class="nx">check</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">:</span>
    				<span class="kc">false</span><span class="o">;</span>
    		<span class="o">},</span>
    		<span class="nx">POS</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">array</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">match</span><span class="o">[</span><span class="m">2</span><span class="o">],</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">setFilters</span><span class="o">[</span> <span class="nx">name</span> <span class="o">];</span>

    			<span class="k">if</span> <span class="o">(</span> <span class="nx">filter</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">return</span> <span class="nx">filter</span><span class="o">(</span> <span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span> <span class="nx">array</span> <span class="o">);</span>
    			<span class="o">}</span>
    		<span class="o">}</span>
    	<span class="o">}</span>
    <span class="o">};</span>

    <span class="k">var</span> <span class="nx">origPOS</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">.</span><span class="nx">POS</span><span class="o">;</span>

    <span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">type</span> <span class="k">in</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span> <span class="o">)</span> <span class="o">{</span>
    	<span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">[</span> <span class="nx">type</span> <span class="o">]</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">[</span> <span class="nx">type</span> <span class="o">].</span><span class="nx">source</span> <span class="o">+</span> <span class="sr">/(?![^\[]*\])(?![^\(]*\))/</span><span class="o">.</span><span class="nx">source</span> <span class="o">);</span>
    <span class="o">}</span>

    <span class="k">var</span> <span class="nx">makeArray</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">array</span><span class="o">,</span> <span class="nx">results</span><span class="o">)</span> <span class="o">{</span>
    	<span class="nx">array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">slice</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span> <span class="nx">array</span> <span class="o">);</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="nx">results</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">results</span><span class="o">.</span><span class="nx">push</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span> <span class="nx">results</span><span class="o">,</span> <span class="nx">array</span> <span class="o">);</span>
    		<span class="k">return</span> <span class="nx">results</span><span class="o">;</span>
    	<span class="o">}</span>

    	<span class="k">return</span> <span class="nx">array</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">// Perform a simple check to determine if the browser is capable of</span>
<span class="c"></span>    <span class="c">// converting a NodeList to an array using builtin methods.</span>
<span class="c"></span>    <span class="k">try</span> <span class="o">{</span>
    	<span class="nb">Array</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">slice</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span> <span class="nb">document</span><span class="o">.</span><span class="nx">documentElement</span><span class="o">.</span><span class="nx">childNodes</span> <span class="o">);</span>

    <span class="c">// Provide a fallback method if it does not work</span>
<span class="c"></span>    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nx">e</span><span class="o">){</span>
    	<span class="nx">makeArray</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">array</span><span class="o">,</span> <span class="nx">results</span><span class="o">)</span> <span class="o">{</span>
    		<span class="k">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">results</span> <span class="o">||</span> <span class="o">[];</span>

    		<span class="k">if</span> <span class="o">(</span> <span class="nx">toString</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">array</span><span class="o">)</span> <span class="o">===</span> <span class="s2">&quot;[object Array]&quot;</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="nb">Array</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">push</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span> <span class="nx">ret</span><span class="o">,</span> <span class="nx">array</span> <span class="o">);</span>
    		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">array</span><span class="o">.</span><span class="nx">length</span> <span class="o">===</span> <span class="s2">&quot;number&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">array</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">ret</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">array</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">);</span>
    				<span class="o">}</span>
    			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    				<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">array</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">ret</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">array</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">);</span>
    				<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">}</span>

    		<span class="k">return</span> <span class="nx">ret</span><span class="o">;</span>
    	<span class="o">};</span>
    <span class="o">}</span>

    <span class="c">// Check to see if the browser returns elements by name when</span>
<span class="c"></span>    <span class="c">// querying by getElementById (and provide a workaround)</span>
<span class="c"></span>    <span class="o">(</span><span class="k">function</span><span class="o">(){</span>
    	<span class="c">// We&#39;re going to inject a fake input element with a specified name</span>
<span class="c"></span>    	<span class="k">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nb">document</span><span class="o">.</span><span class="nx">createElement</span><span class="o">(</span><span class="s2">&quot;form&quot;</span><span class="o">),</span>
    		<span class="nx">id</span> <span class="o">=</span> <span class="s2">&quot;script&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">).</span><span class="nx">getTime</span><span class="o">();</span>
    	<span class="nx">form</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;input name=&#39;&quot;</span> <span class="o">+</span> <span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;&#39;/&gt;&quot;</span><span class="o">;</span>

    	<span class="c">// Inject it into the root element, check its status, and remove it quickly</span>
<span class="c"></span>    	<span class="k">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nb">document</span><span class="o">.</span><span class="nx">documentElement</span><span class="o">;</span>
    	<span class="nx">root</span><span class="o">.</span><span class="nx">insertBefore</span><span class="o">(</span> <span class="nx">form</span><span class="o">,</span> <span class="nx">root</span><span class="o">.</span><span class="nx">firstChild</span> <span class="o">);</span>

    	<span class="c">// The workaround has to do additional checks after a getElementById</span>
<span class="c"></span>    	<span class="c">// Which slows things down for other browsers (hence the branching)</span>
<span class="c"></span>    	<span class="k">if</span> <span class="o">(</span> <span class="o">!!</span><span class="nb">document</span><span class="o">.</span><span class="nx">getElementById</span><span class="o">(</span> <span class="nx">id</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">Expr</span><span class="o">.</span><span class="nx">find</span><span class="o">.</span><span class="nx">ID</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">isXML</span><span class="o">){</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementById</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementById</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]);</span>
    				<span class="k">return</span> <span class="nx">m</span> <span class="o">?</span> <span class="nx">m</span><span class="o">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">m</span><span class="o">.</span><span class="nx">getAttributeNode</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">m</span><span class="o">.</span><span class="nx">getAttributeNode</span><span class="o">(</span><span class="s2">&quot;id&quot;</span><span class="o">).</span><span class="nx">nodeValue</span> <span class="o">===</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">?</span> <span class="o">[</span><span class="nx">m</span><span class="o">]</span> <span class="o">:</span> <span class="kc">undefined</span> <span class="o">:</span> <span class="o">[];</span>
    			<span class="o">}</span>
    		<span class="o">};</span>

    		<span class="nx">Expr</span><span class="o">.</span><span class="nx">filter</span><span class="o">.</span><span class="nx">ID</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">match</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">getAttributeNode</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">getAttributeNode</span><span class="o">(</span><span class="s2">&quot;id&quot;</span><span class="o">);</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeValue</span> <span class="o">===</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">};</span>
    	<span class="o">}</span>

    	<span class="nx">root</span><span class="o">.</span><span class="nx">removeChild</span><span class="o">(</span> <span class="nx">form</span> <span class="o">);</span>
    <span class="o">})();</span>

    <span class="o">(</span><span class="k">function</span><span class="o">(){</span>
    	<span class="c">// Check to see if the browser returns only elements</span>
<span class="c"></span>    	<span class="c">// when doing getElementsByTagName(&quot;*&quot;)</span>
<span class="c"></span>
    	<span class="c">// Create a fake element</span>
<span class="c"></span>    	<span class="k">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="o">.</span><span class="nx">createElement</span><span class="o">(</span><span class="s2">&quot;div&quot;</span><span class="o">);</span>
    	<span class="nx">div</span><span class="o">.</span><span class="nx">appendChild</span><span class="o">(</span> <span class="nb">document</span><span class="o">.</span><span class="nx">createComment</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">)</span> <span class="o">);</span>

    	<span class="c">// Make sure no comments are found</span>
<span class="c"></span>    	<span class="k">if</span> <span class="o">(</span> <span class="nx">div</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="s2">&quot;*&quot;</span><span class="o">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">Expr</span><span class="o">.</span><span class="nx">find</span><span class="o">.</span><span class="nx">TAG</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">context</span><span class="o">){</span>
    			<span class="k">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]);</span>

    			<span class="c">// Filter out possible comments</span>
<span class="c"></span>    			<span class="k">if</span> <span class="o">(</span> <span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]</span> <span class="o">===</span> <span class="s2">&quot;*&quot;</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="o">[];</span>

    				<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">results</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="nx">results</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">tmp</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span> <span class="nx">results</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">);</span>
    					<span class="o">}</span>
    				<span class="o">}</span>

    				<span class="nx">results</span> <span class="o">=</span> <span class="nx">tmp</span><span class="o">;</span>
    			<span class="o">}</span>

    			<span class="k">return</span> <span class="nx">results</span><span class="o">;</span>
    		<span class="o">};</span>
    	<span class="o">}</span>

    	<span class="c">// Check to see if an attribute returns normalized href attributes</span>
<span class="c"></span>    	<span class="nx">div</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;a href=&#39;#&#39;&gt;&lt;/a&gt;&quot;</span><span class="o">;</span>
    	<span class="k">if</span> <span class="o">(</span> <span class="nx">div</span><span class="o">.</span><span class="nx">firstChild</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">div</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">.</span><span class="nx">getAttribute</span> <span class="o">!==</span> <span class="s2">&quot;undefined&quot;</span> <span class="o">&amp;&amp;</span>
    			<span class="nx">div</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">.</span><span class="nx">getAttribute</span><span class="o">(</span><span class="s2">&quot;href&quot;</span><span class="o">)</span> <span class="o">!==</span> <span class="s2">&quot;#&quot;</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">Expr</span><span class="o">.</span><span class="nx">attrHandle</span><span class="o">.</span><span class="nx">href</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    			<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">getAttribute</span><span class="o">(</span><span class="s2">&quot;href&quot;</span><span class="o">,</span> <span class="m">2</span><span class="o">);</span>
    		<span class="o">};</span>
    	<span class="o">}</span>
    <span class="o">})();</span>

    <span class="k">if</span> <span class="o">(</span> <span class="nb">document</span><span class="o">.</span><span class="nx">querySelectorAll</span> <span class="o">)</span> <span class="o">(</span><span class="k">function</span><span class="o">(){</span>
    	<span class="k">var</span> <span class="nx">oldSizzle</span> <span class="o">=</span> <span class="nx">Sizzle</span><span class="o">,</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="o">.</span><span class="nx">createElement</span><span class="o">(</span><span class="s2">&quot;div&quot;</span><span class="o">);</span>
    	<span class="nx">div</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;p class=&#39;TEST&#39;&gt;&lt;/p&gt;&quot;</span><span class="o">;</span>

    	<span class="c">// Safari can&#39;t handle uppercase or unicode characters when</span>
<span class="c"></span>    	<span class="c">// in quirks mode.</span>
<span class="c"></span>    	<span class="k">if</span> <span class="o">(</span> <span class="nx">div</span><span class="o">.</span><span class="nx">querySelectorAll</span> <span class="o">&amp;&amp;</span> <span class="nx">div</span><span class="o">.</span><span class="nx">querySelectorAll</span><span class="o">(</span><span class="s2">&quot;.TEST&quot;</span><span class="o">).</span><span class="nx">length</span> <span class="o">===</span> <span class="m">0</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">return</span><span class="o">;</span>
    	<span class="o">}</span>

    	<span class="nx">Sizzle</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">query</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">extra</span><span class="o">,</span> <span class="nx">seed</span><span class="o">){</span>
    		<span class="nx">context</span> <span class="o">=</span> <span class="nx">context</span> <span class="o">||</span> <span class="nb">document</span><span class="o">;</span>

    		<span class="c">// Only use querySelectorAll on non-XML documents</span>
<span class="c"></span>    		<span class="c">// (ID selectors don&#39;t work in non-HTML documents)</span>
<span class="c"></span>    		<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">seed</span> <span class="o">&amp;&amp;</span> <span class="nx">context</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">9</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span><span class="o">(</span><span class="nx">context</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">try</span> <span class="o">{</span>
    				<span class="k">return</span> <span class="nx">makeArray</span><span class="o">(</span> <span class="nx">context</span><span class="o">.</span><span class="nx">querySelectorAll</span><span class="o">(</span><span class="nx">query</span><span class="o">),</span> <span class="nx">extra</span> <span class="o">);</span>
    			<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nx">e</span><span class="o">){}</span>
    		<span class="o">}</span>

    		<span class="k">return</span> <span class="nx">oldSizzle</span><span class="o">(</span><span class="nx">query</span><span class="o">,</span> <span class="nx">context</span><span class="o">,</span> <span class="nx">extra</span><span class="o">,</span> <span class="nx">seed</span><span class="o">);</span>
    	<span class="o">};</span>

    	<span class="nx">Sizzle</span><span class="o">.</span><span class="nx">find</span> <span class="o">=</span> <span class="nx">oldSizzle</span><span class="o">.</span><span class="nx">find</span><span class="o">;</span>
    	<span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span> <span class="o">=</span> <span class="nx">oldSizzle</span><span class="o">.</span><span class="nx">filter</span><span class="o">;</span>
    	<span class="nx">Sizzle</span><span class="o">.</span><span class="nx">selectors</span> <span class="o">=</span> <span class="nx">oldSizzle</span><span class="o">.</span><span class="nx">selectors</span><span class="o">;</span>
    	<span class="nx">Sizzle</span><span class="o">.</span><span class="nx">matches</span> <span class="o">=</span> <span class="nx">oldSizzle</span><span class="o">.</span><span class="nx">matches</span><span class="o">;</span>
    <span class="o">})();</span>

    <span class="k">if</span> <span class="o">(</span> <span class="nb">document</span><span class="o">.</span><span class="nx">getElementsByClassName</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="o">.</span><span class="nx">documentElement</span><span class="o">.</span><span class="nx">getElementsByClassName</span> <span class="o">)</span> <span class="o">(</span><span class="k">function</span><span class="o">(){</span>
    	<span class="k">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="o">.</span><span class="nx">createElement</span><span class="o">(</span><span class="s2">&quot;div&quot;</span><span class="o">);</span>
    	<span class="nx">div</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;div class=&#39;test e&#39;&gt;&lt;/div&gt;&lt;div class=&#39;test&#39;&gt;&lt;/div&gt;&quot;</span><span class="o">;</span>

    	<span class="c">// Opera can&#39;t find a second classname (in 9.6)</span>
<span class="c"></span>    	<span class="k">if</span> <span class="o">(</span> <span class="nx">div</span><span class="o">.</span><span class="nx">getElementsByClassName</span><span class="o">(</span><span class="s2">&quot;e&quot;</span><span class="o">).</span><span class="nx">length</span> <span class="o">===</span> <span class="m">0</span> <span class="o">)</span>
    		<span class="k">return</span><span class="o">;</span>

    	<span class="c">// Safari caches class attributes, doesn&#39;t catch changes (in 3.2)</span>
<span class="c"></span>    	<span class="nx">div</span><span class="o">.</span><span class="nx">lastChild</span><span class="o">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&quot;e&quot;</span><span class="o">;</span>

    	<span class="k">if</span> <span class="o">(</span> <span class="nx">div</span><span class="o">.</span><span class="nx">getElementsByClassName</span><span class="o">(</span><span class="s2">&quot;e&quot;</span><span class="o">).</span><span class="nx">length</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span>
    		<span class="k">return</span><span class="o">;</span>

    	<span class="nx">Expr</span><span class="o">.</span><span class="nx">order</span><span class="o">.</span><span class="nx">splice</span><span class="o">(</span><span class="m">1</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="s2">&quot;CLASS&quot;</span><span class="o">);</span>
    	<span class="nx">Expr</span><span class="o">.</span><span class="nx">find</span><span class="o">.</span><span class="nx">CLASS</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">match</span><span class="o">,</span> <span class="nx">context</span><span class="o">)</span> <span class="o">{</span>
    		<span class="k">return</span> <span class="nx">context</span><span class="o">.</span><span class="nx">getElementsByClassName</span><span class="o">(</span><span class="nx">match</span><span class="o">[</span><span class="m">1</span><span class="o">]);</span>
    	<span class="o">};</span>
    <span class="o">})();</span>

    <span class="k">function</span> <span class="nx">dirNodeCheck</span><span class="o">(</span> <span class="nx">dir</span><span class="o">,</span> <span class="nx">cur</span><span class="o">,</span> <span class="nx">doneName</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="nx">nodeCheck</span><span class="o">,</span> <span class="nx">isXML</span> <span class="o">)</span> <span class="o">{</span>
    	<span class="k">var</span> <span class="nx">sibDir</span> <span class="o">=</span> <span class="nx">dir</span> <span class="o">==</span> <span class="s2">&quot;previousSibling&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span><span class="o">;</span>
    	<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
    		<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="nx">sibDir</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">){</span>
    				<span class="nx">elem</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">=</span> <span class="nx">doneName</span><span class="o">;</span>
    				<span class="nx">elem</span><span class="o">.</span><span class="nx">sizset</span> <span class="o">=</span> <span class="nx">i</span><span class="o">;</span>
    			<span class="o">}</span>
    			<span class="nx">elem</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">[</span><span class="nx">dir</span><span class="o">];</span>
    			<span class="k">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    			<span class="k">while</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">===</span> <span class="nx">doneName</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">match</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">elem</span><span class="o">.</span><span class="nx">sizset</span><span class="o">];</span>
    					<span class="k">break</span><span class="o">;</span>
    				<span class="o">}</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span> <span class="o">){</span>
    					<span class="nx">elem</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">=</span> <span class="nx">doneName</span><span class="o">;</span>
    					<span class="nx">elem</span><span class="o">.</span><span class="nx">sizset</span> <span class="o">=</span> <span class="nx">i</span><span class="o">;</span>
    				<span class="o">}</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">===</span> <span class="nx">cur</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">match</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">;</span>
    					<span class="k">break</span><span class="o">;</span>
    				<span class="o">}</span>

    				<span class="nx">elem</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">[</span><span class="nx">dir</span><span class="o">];</span>
    			<span class="o">}</span>

    			<span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">}</span>
    	<span class="o">}</span>
    <span class="o">}</span>

    <span class="k">function</span> <span class="nx">dirCheck</span><span class="o">(</span> <span class="nx">dir</span><span class="o">,</span> <span class="nx">cur</span><span class="o">,</span> <span class="nx">doneName</span><span class="o">,</span> <span class="nx">checkSet</span><span class="o">,</span> <span class="nx">nodeCheck</span><span class="o">,</span> <span class="nx">isXML</span> <span class="o">)</span> <span class="o">{</span>
    	<span class="k">var</span> <span class="nx">sibDir</span> <span class="o">=</span> <span class="nx">dir</span> <span class="o">==</span> <span class="s2">&quot;previousSibling&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isXML</span><span class="o">;</span>
    	<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="k">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
    		<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    			<span class="k">if</span> <span class="o">(</span> <span class="nx">sibDir</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="nx">elem</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">=</span> <span class="nx">doneName</span><span class="o">;</span>
    				<span class="nx">elem</span><span class="o">.</span><span class="nx">sizset</span> <span class="o">=</span> <span class="nx">i</span><span class="o">;</span>
    			<span class="o">}</span>
    			<span class="nx">elem</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">[</span><span class="nx">dir</span><span class="o">];</span>
    			<span class="k">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    			<span class="k">while</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">)</span> <span class="o">{</span>
    				<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">===</span> <span class="nx">doneName</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="nx">match</span> <span class="o">=</span> <span class="nx">checkSet</span><span class="o">[</span><span class="nx">elem</span><span class="o">.</span><span class="nx">sizset</span><span class="o">];</span>
    					<span class="k">break</span><span class="o">;</span>
    				<span class="o">}</span>

    				<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">1</span> <span class="o">)</span> <span class="o">{</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="nx">isXML</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">elem</span><span class="o">.</span><span class="nx">sizcache</span> <span class="o">=</span> <span class="nx">doneName</span><span class="o">;</span>
    						<span class="nx">elem</span><span class="o">.</span><span class="nx">sizset</span> <span class="o">=</span> <span class="nx">i</span><span class="o">;</span>
    					<span class="o">}</span>
    					<span class="k">if</span> <span class="o">(</span> <span class="k">typeof</span> <span class="nx">cur</span> <span class="o">!==</span> <span class="s2">&quot;string&quot;</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="k">if</span> <span class="o">(</span> <span class="nx">elem</span> <span class="o">===</span> <span class="nx">cur</span> <span class="o">)</span> <span class="o">{</span>
    							<span class="nx">match</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    							<span class="k">break</span><span class="o">;</span>
    						<span class="o">}</span>

    					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span><span class="o">(</span> <span class="nx">cur</span><span class="o">,</span> <span class="o">[</span><span class="nx">elem</span><span class="o">]</span> <span class="o">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="o">)</span> <span class="o">{</span>
    						<span class="nx">match</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">;</span>
    						<span class="k">break</span><span class="o">;</span>
    					<span class="o">}</span>
    				<span class="o">}</span>

    				<span class="nx">elem</span> <span class="o">=</span> <span class="nx">elem</span><span class="o">[</span><span class="nx">dir</span><span class="o">];</span>
    			<span class="o">}</span>

    			<span class="nx">checkSet</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">match</span><span class="o">;</span>
    		<span class="o">}</span>
    	<span class="o">}</span>
    <span class="o">}</span>

    <span class="k">var</span> <span class="nx">contains</span> <span class="o">=</span> <span class="nb">document</span><span class="o">.</span><span class="nx">compareDocumentPosition</span> <span class="o">?</span>  <span class="k">function</span><span class="o">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="o">){</span>
    	<span class="k">return</span> <span class="nx">a</span><span class="o">.</span><span class="nx">compareDocumentPosition</span><span class="o">(</span><span class="nx">b</span><span class="o">)</span> <span class="o">&amp;</span> <span class="m">16</span><span class="o">;</span>
    <span class="o">}</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="o">){</span>
    	<span class="k">return</span> <span class="nx">a</span> <span class="o">!==</span> <span class="nx">b</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">a</span><span class="o">.</span><span class="nx">contains</span> <span class="o">?</span> <span class="nx">a</span><span class="o">.</span><span class="nx">contains</span><span class="o">(</span><span class="nx">b</span><span class="o">)</span> <span class="o">:</span> <span class="kc">true</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="k">var</span> <span class="nx">isXML</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">){</span>
    	<span class="k">return</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="m">9</span> <span class="o">&amp;&amp;</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">documentElement</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">!==</span> <span class="s2">&quot;HTML&quot;</span> <span class="o">||</span>
    		<span class="o">!!</span><span class="nx">elem</span><span class="o">.</span><span class="nx">ownerDocument</span> <span class="o">&amp;&amp;</span> <span class="nx">isXML</span><span class="o">(</span> <span class="nx">elem</span><span class="o">.</span><span class="nx">ownerDocument</span> <span class="o">);</span>
    <span class="o">};</span>

    <span class="k">var</span> <span class="nx">posProcess</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">selector</span><span class="o">,</span> <span class="nx">context</span><span class="o">){</span>
    	<span class="k">var</span> <span class="nx">tmpSet</span> <span class="o">=</span> <span class="o">[],</span> <span class="nx">later</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="nx">match</span><span class="o">,</span>
    		<span class="nx">root</span> <span class="o">=</span> <span class="nx">context</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">?</span> <span class="o">[</span><span class="nx">context</span><span class="o">]</span> <span class="o">:</span> <span class="nx">context</span><span class="o">;</span>

    	<span class="c">// Position selectors must be done after the filter</span>
<span class="c"></span>    	<span class="c">// And so must :not(positional) so we move all PSEUDOs to the end</span>
<span class="c"></span>    	<span class="k">while</span> <span class="o">(</span> <span class="o">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">.</span><span class="nx">PSEUDO</span><span class="o">.</span><span class="nx">exec</span><span class="o">(</span> <span class="nx">selector</span> <span class="o">))</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">later</span> <span class="o">+=</span> <span class="nx">match</span><span class="o">[</span><span class="m">0</span><span class="o">];</span>
    		<span class="nx">selector</span> <span class="o">=</span> <span class="nx">selector</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">match</span><span class="o">.</span><span class="nx">PSEUDO</span><span class="o">,</span> <span class="s2">&quot;&quot;</span> <span class="o">);</span>
    	<span class="o">}</span>

    	<span class="nx">selector</span> <span class="o">=</span> <span class="nx">Expr</span><span class="o">.</span><span class="nx">relative</span><span class="o">[</span><span class="nx">selector</span><span class="o">]</span> <span class="o">?</span> <span class="nx">selector</span> <span class="o">+</span> <span class="s2">&quot;*&quot;</span> <span class="o">:</span> <span class="nx">selector</span><span class="o">;</span>

    	<span class="k">for</span> <span class="o">(</span> <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">root</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
    		<span class="nx">Sizzle</span><span class="o">(</span> <span class="nx">selector</span><span class="o">,</span> <span class="nx">root</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">tmpSet</span> <span class="o">);</span>
    	<span class="o">}</span>

    	<span class="k">return</span> <span class="nx">Sizzle</span><span class="o">.</span><span class="nx">filter</span><span class="o">(</span> <span class="nx">later</span><span class="o">,</span> <span class="nx">tmpSet</span> <span class="o">);</span>
    <span class="o">};</span>
    
    <span class="c">// EXPOSE</span>
<span class="c"></span>    
    <span class="nx">A</span><span class="o">.</span><span class="nx">QuerySelector</span> <span class="o">=</span> <span class="nx">Sizzle</span><span class="o">;</span>
    
<span class="o">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="o">,</span> <span class="o">[]);</span>
</pre></div>
